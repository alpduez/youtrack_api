"""
    YouTrack REST API

    YouTrack issue tracking and project management system  # noqa: E501

    The version of the OpenAPI document: 2021.3
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from youtrack_api.api_client import ApiClient, Endpoint as _Endpoint
from youtrack_api.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from youtrack_api.model.activity_cursor_page import ActivityCursorPage
from youtrack_api.model.activity_item import ActivityItem
from youtrack_api.model.agile import Agile
from youtrack_api.model.appearance_settings import AppearanceSettings
from youtrack_api.model.backup_file import BackupFile
from youtrack_api.model.backup_status import BackupStatus
from youtrack_api.model.build_bundle import BuildBundle
from youtrack_api.model.command_list import CommandList
from youtrack_api.model.custom_field import CustomField
from youtrack_api.model.custom_field_defaults import CustomFieldDefaults
from youtrack_api.model.database_backup_settings import DatabaseBackupSettings
from youtrack_api.model.enum_bundle import EnumBundle
from youtrack_api.model.field_type import FieldType
from youtrack_api.model.general_user_profile import GeneralUserProfile
from youtrack_api.model.global_settings import GlobalSettings
from youtrack_api.model.global_time_tracking_settings import GlobalTimeTrackingSettings
from youtrack_api.model.issue import Issue
from youtrack_api.model.issue_attachment import IssueAttachment
from youtrack_api.model.issue_comment import IssueComment
from youtrack_api.model.issue_custom_field import IssueCustomField
from youtrack_api.model.issue_link import IssueLink
from youtrack_api.model.issue_link_type import IssueLinkType
from youtrack_api.model.issue_tag import IssueTag
from youtrack_api.model.issue_time_tracker import IssueTimeTracker
from youtrack_api.model.issue_work_item import IssueWorkItem
from youtrack_api.model.license import License
from youtrack_api.model.locale_settings import LocaleSettings
from youtrack_api.model.me import Me
from youtrack_api.model.notification_settings import NotificationSettings
from youtrack_api.model.notifications_user_profile import NotificationsUserProfile
from youtrack_api.model.owned_bundle import OwnedBundle
from youtrack_api.model.project import Project
from youtrack_api.model.project_custom_field import ProjectCustomField
from youtrack_api.model.project_time_tracking_settings import ProjectTimeTrackingSettings
from youtrack_api.model.rest_cors_settings import RestCorsSettings
from youtrack_api.model.saved_query import SavedQuery
from youtrack_api.model.search_suggestions import SearchSuggestions
from youtrack_api.model.sprint import Sprint
from youtrack_api.model.state_bundle import StateBundle
from youtrack_api.model.system_settings import SystemSettings
from youtrack_api.model.telemetry import Telemetry
from youtrack_api.model.time_tracking_user_profile import TimeTrackingUserProfile
from youtrack_api.model.user import User
from youtrack_api.model.user_bundle import UserBundle
from youtrack_api.model.user_group import UserGroup
from youtrack_api.model.version_bundle import VersionBundle
from youtrack_api.model.work_item_type import WorkItemType
from youtrack_api.model.work_time_settings import WorkTimeSettings


class DefaultApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __activities_get(
            self,
            **kwargs
        ):
            """activities_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.activities_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                categories (str): [optional]
                reverse (bool): Indicates whether the order of returning activities is from newest to oldest or the opposite. If \"false\", then the oldest activity item that matches a selected filter is returned first. If \"true\", then the newest activity is returned first. By default, \"false\".. [optional]
                start (str): Start timestamp of the time interval the activity timestamp belongs to. If the parameter is not set, it is considered to be 0.. [optional]
                end (str): End timestamp of the time interval the activity timestamp belongs to. If the parameter is not set, it is considered as Long.MAX_VALUE.. [optional]
                author (str): Parameter to filter activities by the author. The database id or login, or Hub id, or 'me' for the current logged in user could be specified.. [optional]
                issue_query (str): Issues search query. Read more about <a href=\"Search-and-Command-Attributes.xml\">search syntax</a>.. [optional]
                fields (str): [optional]
                skip (int): [optional]
                top (int): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [ActivityItem]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.activities_get = _Endpoint(
            settings={
                'response_type': ([ActivityItem],),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/activities',
                'operation_id': 'activities_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'categories',
                    'reverse',
                    'start',
                    'end',
                    'author',
                    'issue_query',
                    'fields',
                    'skip',
                    'top',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'categories':
                        (str,),
                    'reverse':
                        (bool,),
                    'start':
                        (str,),
                    'end':
                        (str,),
                    'author':
                        (str,),
                    'issue_query':
                        (str,),
                    'fields':
                        (str,),
                    'skip':
                        (int,),
                    'top':
                        (int,),
                },
                'attribute_map': {
                    'categories': 'categories',
                    'reverse': 'reverse',
                    'start': 'start',
                    'end': 'end',
                    'author': 'author',
                    'issue_query': 'issueQuery',
                    'fields': 'fields',
                    'skip': '$skip',
                    'top': '$top',
                },
                'location_map': {
                    'categories': 'query',
                    'reverse': 'query',
                    'start': 'query',
                    'end': 'query',
                    'author': 'query',
                    'issue_query': 'query',
                    'fields': 'query',
                    'skip': 'query',
                    'top': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__activities_get
        )

        def __activities_id_get(
            self,
            id,
            **kwargs
        ):
            """activities_id_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.activities_id_get(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ActivityItem
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.activities_id_get = _Endpoint(
            settings={
                'response_type': (ActivityItem,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/activities/{id}',
                'operation_id': 'activities_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__activities_id_get
        )

        def __activities_page_get(
            self,
            **kwargs
        ):
            """activities_page_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.activities_page_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                categories (str): [optional]
                reverse (bool): Indicates whether the order of returning activities is from newest to oldest or the opposite. If \"false\", then the oldest activity item that matches a selected filter is returned first. If \"true\", then the newest activity is returned first. By default, \"false\".. [optional]
                start (str): Start timestamp of the time interval the activity timestamp belongs to. If the parameter is not set, it is considered to be 0.. [optional]
                end (str): End timestamp of the time interval the activity timestamp belongs to. If the parameter is not set, it is considered as Long.MAX_VALUE.. [optional]
                author (str): Parameter to filter activities by the author. The database id or login, or Hub id, or 'me' for the current logged in user could be specified.. [optional]
                issue_query (str): Issues search query. Read more about <a href=\"Search-and-Command-Attributes.xml\">search syntax</a>.. [optional]
                cursor (str): [optional]
                activity_id (str): ID of the activity that should be included in the page. The activity is allocated to the middle of the page.. [optional]
                fields (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ActivityCursorPage
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.activities_page_get = _Endpoint(
            settings={
                'response_type': (ActivityCursorPage,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/activitiesPage',
                'operation_id': 'activities_page_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'categories',
                    'reverse',
                    'start',
                    'end',
                    'author',
                    'issue_query',
                    'cursor',
                    'activity_id',
                    'fields',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'categories':
                        (str,),
                    'reverse':
                        (bool,),
                    'start':
                        (str,),
                    'end':
                        (str,),
                    'author':
                        (str,),
                    'issue_query':
                        (str,),
                    'cursor':
                        (str,),
                    'activity_id':
                        (str,),
                    'fields':
                        (str,),
                },
                'attribute_map': {
                    'categories': 'categories',
                    'reverse': 'reverse',
                    'start': 'start',
                    'end': 'end',
                    'author': 'author',
                    'issue_query': 'issueQuery',
                    'cursor': 'cursor',
                    'activity_id': 'activityId',
                    'fields': 'fields',
                },
                'location_map': {
                    'categories': 'query',
                    'reverse': 'query',
                    'start': 'query',
                    'end': 'query',
                    'author': 'query',
                    'issue_query': 'query',
                    'cursor': 'query',
                    'activity_id': 'query',
                    'fields': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__activities_page_get
        )

        def __admin_custom_field_settings_bundles_build_get(
            self,
            **kwargs
        ):
            """admin_custom_field_settings_bundles_build_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_custom_field_settings_bundles_build_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                fields (str): [optional]
                skip (int): [optional]
                top (int): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [BuildBundle]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.admin_custom_field_settings_bundles_build_get = _Endpoint(
            settings={
                'response_type': ([BuildBundle],),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/customFieldSettings/bundles/build',
                'operation_id': 'admin_custom_field_settings_bundles_build_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'fields',
                    'skip',
                    'top',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'fields':
                        (str,),
                    'skip':
                        (int,),
                    'top':
                        (int,),
                },
                'attribute_map': {
                    'fields': 'fields',
                    'skip': '$skip',
                    'top': '$top',
                },
                'location_map': {
                    'fields': 'query',
                    'skip': 'query',
                    'top': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_custom_field_settings_bundles_build_get
        )

        def __admin_custom_field_settings_bundles_build_id_delete(
            self,
            id,
            **kwargs
        ):
            """admin_custom_field_settings_bundles_build_id_delete  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_custom_field_settings_bundles_build_id_delete(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.admin_custom_field_settings_bundles_build_id_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/customFieldSettings/bundles/build/{id}',
                'operation_id': 'admin_custom_field_settings_bundles_build_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_custom_field_settings_bundles_build_id_delete
        )

        def __admin_custom_field_settings_bundles_build_id_get(
            self,
            id,
            **kwargs
        ):
            """admin_custom_field_settings_bundles_build_id_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_custom_field_settings_bundles_build_id_get(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                BuildBundle
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.admin_custom_field_settings_bundles_build_id_get = _Endpoint(
            settings={
                'response_type': (BuildBundle,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/customFieldSettings/bundles/build/{id}',
                'operation_id': 'admin_custom_field_settings_bundles_build_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_custom_field_settings_bundles_build_id_get
        )

        def __admin_custom_field_settings_bundles_build_id_post(
            self,
            id,
            **kwargs
        ):
            """admin_custom_field_settings_bundles_build_id_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_custom_field_settings_bundles_build_id_post(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                build_bundle (BuildBundle): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                BuildBundle
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.admin_custom_field_settings_bundles_build_id_post = _Endpoint(
            settings={
                'response_type': (BuildBundle,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/customFieldSettings/bundles/build/{id}',
                'operation_id': 'admin_custom_field_settings_bundles_build_id_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                    'build_bundle',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                    'build_bundle':
                        (BuildBundle,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                    'build_bundle': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_custom_field_settings_bundles_build_id_post
        )

        def __admin_custom_field_settings_bundles_build_post(
            self,
            **kwargs
        ):
            """admin_custom_field_settings_bundles_build_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_custom_field_settings_bundles_build_post(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                fields (str): [optional]
                build_bundle (BuildBundle): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                BuildBundle
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.admin_custom_field_settings_bundles_build_post = _Endpoint(
            settings={
                'response_type': (BuildBundle,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/customFieldSettings/bundles/build',
                'operation_id': 'admin_custom_field_settings_bundles_build_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'fields',
                    'build_bundle',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'fields':
                        (str,),
                    'build_bundle':
                        (BuildBundle,),
                },
                'attribute_map': {
                    'fields': 'fields',
                },
                'location_map': {
                    'fields': 'query',
                    'build_bundle': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_custom_field_settings_bundles_build_post
        )

        def __admin_custom_field_settings_bundles_enum_get(
            self,
            **kwargs
        ):
            """admin_custom_field_settings_bundles_enum_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_custom_field_settings_bundles_enum_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                fields (str): [optional]
                skip (int): [optional]
                top (int): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [EnumBundle]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.admin_custom_field_settings_bundles_enum_get = _Endpoint(
            settings={
                'response_type': ([EnumBundle],),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/customFieldSettings/bundles/enum',
                'operation_id': 'admin_custom_field_settings_bundles_enum_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'fields',
                    'skip',
                    'top',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'fields':
                        (str,),
                    'skip':
                        (int,),
                    'top':
                        (int,),
                },
                'attribute_map': {
                    'fields': 'fields',
                    'skip': '$skip',
                    'top': '$top',
                },
                'location_map': {
                    'fields': 'query',
                    'skip': 'query',
                    'top': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_custom_field_settings_bundles_enum_get
        )

        def __admin_custom_field_settings_bundles_enum_id_delete(
            self,
            id,
            **kwargs
        ):
            """admin_custom_field_settings_bundles_enum_id_delete  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_custom_field_settings_bundles_enum_id_delete(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.admin_custom_field_settings_bundles_enum_id_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/customFieldSettings/bundles/enum/{id}',
                'operation_id': 'admin_custom_field_settings_bundles_enum_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_custom_field_settings_bundles_enum_id_delete
        )

        def __admin_custom_field_settings_bundles_enum_id_get(
            self,
            id,
            **kwargs
        ):
            """admin_custom_field_settings_bundles_enum_id_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_custom_field_settings_bundles_enum_id_get(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                EnumBundle
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.admin_custom_field_settings_bundles_enum_id_get = _Endpoint(
            settings={
                'response_type': (EnumBundle,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/customFieldSettings/bundles/enum/{id}',
                'operation_id': 'admin_custom_field_settings_bundles_enum_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_custom_field_settings_bundles_enum_id_get
        )

        def __admin_custom_field_settings_bundles_enum_id_post(
            self,
            id,
            **kwargs
        ):
            """admin_custom_field_settings_bundles_enum_id_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_custom_field_settings_bundles_enum_id_post(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                enum_bundle (EnumBundle): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                EnumBundle
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.admin_custom_field_settings_bundles_enum_id_post = _Endpoint(
            settings={
                'response_type': (EnumBundle,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/customFieldSettings/bundles/enum/{id}',
                'operation_id': 'admin_custom_field_settings_bundles_enum_id_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                    'enum_bundle',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                    'enum_bundle':
                        (EnumBundle,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                    'enum_bundle': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_custom_field_settings_bundles_enum_id_post
        )

        def __admin_custom_field_settings_bundles_enum_post(
            self,
            **kwargs
        ):
            """admin_custom_field_settings_bundles_enum_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_custom_field_settings_bundles_enum_post(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                fields (str): [optional]
                enum_bundle (EnumBundle): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                EnumBundle
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.admin_custom_field_settings_bundles_enum_post = _Endpoint(
            settings={
                'response_type': (EnumBundle,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/customFieldSettings/bundles/enum',
                'operation_id': 'admin_custom_field_settings_bundles_enum_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'fields',
                    'enum_bundle',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'fields':
                        (str,),
                    'enum_bundle':
                        (EnumBundle,),
                },
                'attribute_map': {
                    'fields': 'fields',
                },
                'location_map': {
                    'fields': 'query',
                    'enum_bundle': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_custom_field_settings_bundles_enum_post
        )

        def __admin_custom_field_settings_bundles_owned_field_get(
            self,
            **kwargs
        ):
            """admin_custom_field_settings_bundles_owned_field_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_custom_field_settings_bundles_owned_field_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                fields (str): [optional]
                skip (int): [optional]
                top (int): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [OwnedBundle]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.admin_custom_field_settings_bundles_owned_field_get = _Endpoint(
            settings={
                'response_type': ([OwnedBundle],),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/customFieldSettings/bundles/ownedField',
                'operation_id': 'admin_custom_field_settings_bundles_owned_field_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'fields',
                    'skip',
                    'top',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'fields':
                        (str,),
                    'skip':
                        (int,),
                    'top':
                        (int,),
                },
                'attribute_map': {
                    'fields': 'fields',
                    'skip': '$skip',
                    'top': '$top',
                },
                'location_map': {
                    'fields': 'query',
                    'skip': 'query',
                    'top': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_custom_field_settings_bundles_owned_field_get
        )

        def __admin_custom_field_settings_bundles_owned_field_id_delete(
            self,
            id,
            **kwargs
        ):
            """admin_custom_field_settings_bundles_owned_field_id_delete  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_custom_field_settings_bundles_owned_field_id_delete(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.admin_custom_field_settings_bundles_owned_field_id_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/customFieldSettings/bundles/ownedField/{id}',
                'operation_id': 'admin_custom_field_settings_bundles_owned_field_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_custom_field_settings_bundles_owned_field_id_delete
        )

        def __admin_custom_field_settings_bundles_owned_field_id_get(
            self,
            id,
            **kwargs
        ):
            """admin_custom_field_settings_bundles_owned_field_id_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_custom_field_settings_bundles_owned_field_id_get(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                OwnedBundle
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.admin_custom_field_settings_bundles_owned_field_id_get = _Endpoint(
            settings={
                'response_type': (OwnedBundle,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/customFieldSettings/bundles/ownedField/{id}',
                'operation_id': 'admin_custom_field_settings_bundles_owned_field_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_custom_field_settings_bundles_owned_field_id_get
        )

        def __admin_custom_field_settings_bundles_owned_field_id_post(
            self,
            id,
            **kwargs
        ):
            """admin_custom_field_settings_bundles_owned_field_id_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_custom_field_settings_bundles_owned_field_id_post(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                owned_bundle (OwnedBundle): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                OwnedBundle
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.admin_custom_field_settings_bundles_owned_field_id_post = _Endpoint(
            settings={
                'response_type': (OwnedBundle,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/customFieldSettings/bundles/ownedField/{id}',
                'operation_id': 'admin_custom_field_settings_bundles_owned_field_id_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                    'owned_bundle',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                    'owned_bundle':
                        (OwnedBundle,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                    'owned_bundle': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_custom_field_settings_bundles_owned_field_id_post
        )

        def __admin_custom_field_settings_bundles_owned_field_post(
            self,
            **kwargs
        ):
            """admin_custom_field_settings_bundles_owned_field_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_custom_field_settings_bundles_owned_field_post(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                fields (str): [optional]
                owned_bundle (OwnedBundle): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                OwnedBundle
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.admin_custom_field_settings_bundles_owned_field_post = _Endpoint(
            settings={
                'response_type': (OwnedBundle,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/customFieldSettings/bundles/ownedField',
                'operation_id': 'admin_custom_field_settings_bundles_owned_field_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'fields',
                    'owned_bundle',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'fields':
                        (str,),
                    'owned_bundle':
                        (OwnedBundle,),
                },
                'attribute_map': {
                    'fields': 'fields',
                },
                'location_map': {
                    'fields': 'query',
                    'owned_bundle': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_custom_field_settings_bundles_owned_field_post
        )

        def __admin_custom_field_settings_bundles_state_get(
            self,
            **kwargs
        ):
            """admin_custom_field_settings_bundles_state_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_custom_field_settings_bundles_state_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                fields (str): [optional]
                skip (int): [optional]
                top (int): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [StateBundle]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.admin_custom_field_settings_bundles_state_get = _Endpoint(
            settings={
                'response_type': ([StateBundle],),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/customFieldSettings/bundles/state',
                'operation_id': 'admin_custom_field_settings_bundles_state_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'fields',
                    'skip',
                    'top',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'fields':
                        (str,),
                    'skip':
                        (int,),
                    'top':
                        (int,),
                },
                'attribute_map': {
                    'fields': 'fields',
                    'skip': '$skip',
                    'top': '$top',
                },
                'location_map': {
                    'fields': 'query',
                    'skip': 'query',
                    'top': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_custom_field_settings_bundles_state_get
        )

        def __admin_custom_field_settings_bundles_state_id_delete(
            self,
            id,
            **kwargs
        ):
            """admin_custom_field_settings_bundles_state_id_delete  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_custom_field_settings_bundles_state_id_delete(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.admin_custom_field_settings_bundles_state_id_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/customFieldSettings/bundles/state/{id}',
                'operation_id': 'admin_custom_field_settings_bundles_state_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_custom_field_settings_bundles_state_id_delete
        )

        def __admin_custom_field_settings_bundles_state_id_get(
            self,
            id,
            **kwargs
        ):
            """admin_custom_field_settings_bundles_state_id_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_custom_field_settings_bundles_state_id_get(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                StateBundle
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.admin_custom_field_settings_bundles_state_id_get = _Endpoint(
            settings={
                'response_type': (StateBundle,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/customFieldSettings/bundles/state/{id}',
                'operation_id': 'admin_custom_field_settings_bundles_state_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_custom_field_settings_bundles_state_id_get
        )

        def __admin_custom_field_settings_bundles_state_id_post(
            self,
            id,
            **kwargs
        ):
            """admin_custom_field_settings_bundles_state_id_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_custom_field_settings_bundles_state_id_post(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                state_bundle (StateBundle): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                StateBundle
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.admin_custom_field_settings_bundles_state_id_post = _Endpoint(
            settings={
                'response_type': (StateBundle,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/customFieldSettings/bundles/state/{id}',
                'operation_id': 'admin_custom_field_settings_bundles_state_id_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                    'state_bundle',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                    'state_bundle':
                        (StateBundle,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                    'state_bundle': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_custom_field_settings_bundles_state_id_post
        )

        def __admin_custom_field_settings_bundles_state_post(
            self,
            **kwargs
        ):
            """admin_custom_field_settings_bundles_state_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_custom_field_settings_bundles_state_post(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                fields (str): [optional]
                state_bundle (StateBundle): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                StateBundle
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.admin_custom_field_settings_bundles_state_post = _Endpoint(
            settings={
                'response_type': (StateBundle,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/customFieldSettings/bundles/state',
                'operation_id': 'admin_custom_field_settings_bundles_state_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'fields',
                    'state_bundle',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'fields':
                        (str,),
                    'state_bundle':
                        (StateBundle,),
                },
                'attribute_map': {
                    'fields': 'fields',
                },
                'location_map': {
                    'fields': 'query',
                    'state_bundle': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_custom_field_settings_bundles_state_post
        )

        def __admin_custom_field_settings_bundles_user_get(
            self,
            **kwargs
        ):
            """admin_custom_field_settings_bundles_user_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_custom_field_settings_bundles_user_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                fields (str): [optional]
                skip (int): [optional]
                top (int): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [UserBundle]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.admin_custom_field_settings_bundles_user_get = _Endpoint(
            settings={
                'response_type': ([UserBundle],),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/customFieldSettings/bundles/user',
                'operation_id': 'admin_custom_field_settings_bundles_user_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'fields',
                    'skip',
                    'top',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'fields':
                        (str,),
                    'skip':
                        (int,),
                    'top':
                        (int,),
                },
                'attribute_map': {
                    'fields': 'fields',
                    'skip': '$skip',
                    'top': '$top',
                },
                'location_map': {
                    'fields': 'query',
                    'skip': 'query',
                    'top': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_custom_field_settings_bundles_user_get
        )

        def __admin_custom_field_settings_bundles_user_id_aggregated_users_get(
            self,
            id,
            **kwargs
        ):
            """admin_custom_field_settings_bundles_user_id_aggregated_users_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_custom_field_settings_bundles_user_id_aggregated_users_get(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                skip (int): [optional]
                top (int): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [User]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.admin_custom_field_settings_bundles_user_id_aggregated_users_get = _Endpoint(
            settings={
                'response_type': ([User],),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/customFieldSettings/bundles/user/{id}/aggregatedUsers',
                'operation_id': 'admin_custom_field_settings_bundles_user_id_aggregated_users_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                    'skip',
                    'top',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                    'skip':
                        (int,),
                    'top':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                    'skip': '$skip',
                    'top': '$top',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                    'skip': 'query',
                    'top': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_custom_field_settings_bundles_user_id_aggregated_users_get
        )

        def __admin_custom_field_settings_bundles_user_id_delete(
            self,
            id,
            **kwargs
        ):
            """admin_custom_field_settings_bundles_user_id_delete  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_custom_field_settings_bundles_user_id_delete(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.admin_custom_field_settings_bundles_user_id_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/customFieldSettings/bundles/user/{id}',
                'operation_id': 'admin_custom_field_settings_bundles_user_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_custom_field_settings_bundles_user_id_delete
        )

        def __admin_custom_field_settings_bundles_user_id_get(
            self,
            id,
            **kwargs
        ):
            """admin_custom_field_settings_bundles_user_id_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_custom_field_settings_bundles_user_id_get(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                UserBundle
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.admin_custom_field_settings_bundles_user_id_get = _Endpoint(
            settings={
                'response_type': (UserBundle,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/customFieldSettings/bundles/user/{id}',
                'operation_id': 'admin_custom_field_settings_bundles_user_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_custom_field_settings_bundles_user_id_get
        )

        def __admin_custom_field_settings_bundles_user_id_groups_get(
            self,
            id,
            **kwargs
        ):
            """admin_custom_field_settings_bundles_user_id_groups_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_custom_field_settings_bundles_user_id_groups_get(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                skip (int): [optional]
                top (int): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [UserGroup]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.admin_custom_field_settings_bundles_user_id_groups_get = _Endpoint(
            settings={
                'response_type': ([UserGroup],),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/customFieldSettings/bundles/user/{id}/groups',
                'operation_id': 'admin_custom_field_settings_bundles_user_id_groups_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                    'skip',
                    'top',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                    'skip':
                        (int,),
                    'top':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                    'skip': '$skip',
                    'top': '$top',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                    'skip': 'query',
                    'top': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_custom_field_settings_bundles_user_id_groups_get
        )

        def __admin_custom_field_settings_bundles_user_id_groups_post(
            self,
            id,
            **kwargs
        ):
            """admin_custom_field_settings_bundles_user_id_groups_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_custom_field_settings_bundles_user_id_groups_post(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                user_group (UserGroup): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                UserGroup
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.admin_custom_field_settings_bundles_user_id_groups_post = _Endpoint(
            settings={
                'response_type': (UserGroup,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/customFieldSettings/bundles/user/{id}/groups',
                'operation_id': 'admin_custom_field_settings_bundles_user_id_groups_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                    'user_group',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                    'user_group':
                        (UserGroup,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                    'user_group': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_custom_field_settings_bundles_user_id_groups_post
        )

        def __admin_custom_field_settings_bundles_user_id_groups_user_group_id_delete(
            self,
            id,
            user_group_id,
            **kwargs
        ):
            """admin_custom_field_settings_bundles_user_id_groups_user_group_id_delete  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_custom_field_settings_bundles_user_id_groups_user_group_id_delete(id, user_group_id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):
                user_group_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            kwargs['user_group_id'] = \
                user_group_id
            return self.call_with_http_info(**kwargs)

        self.admin_custom_field_settings_bundles_user_id_groups_user_group_id_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/customFieldSettings/bundles/user/{id}/groups/{userGroupId}',
                'operation_id': 'admin_custom_field_settings_bundles_user_id_groups_user_group_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'user_group_id',
                ],
                'required': [
                    'id',
                    'user_group_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'user_group_id':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'user_group_id': 'userGroupId',
                },
                'location_map': {
                    'id': 'path',
                    'user_group_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_custom_field_settings_bundles_user_id_groups_user_group_id_delete
        )

        def __admin_custom_field_settings_bundles_user_id_groups_user_group_id_get(
            self,
            id,
            user_group_id,
            **kwargs
        ):
            """admin_custom_field_settings_bundles_user_id_groups_user_group_id_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_custom_field_settings_bundles_user_id_groups_user_group_id_get(id, user_group_id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):
                user_group_id (str):

            Keyword Args:
                fields (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                UserGroup
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            kwargs['user_group_id'] = \
                user_group_id
            return self.call_with_http_info(**kwargs)

        self.admin_custom_field_settings_bundles_user_id_groups_user_group_id_get = _Endpoint(
            settings={
                'response_type': (UserGroup,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/customFieldSettings/bundles/user/{id}/groups/{userGroupId}',
                'operation_id': 'admin_custom_field_settings_bundles_user_id_groups_user_group_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'user_group_id',
                    'fields',
                ],
                'required': [
                    'id',
                    'user_group_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'user_group_id':
                        (str,),
                    'fields':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'user_group_id': 'userGroupId',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'user_group_id': 'path',
                    'fields': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_custom_field_settings_bundles_user_id_groups_user_group_id_get
        )

        def __admin_custom_field_settings_bundles_user_id_individuals_get(
            self,
            id,
            **kwargs
        ):
            """admin_custom_field_settings_bundles_user_id_individuals_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_custom_field_settings_bundles_user_id_individuals_get(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                skip (int): [optional]
                top (int): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [User]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.admin_custom_field_settings_bundles_user_id_individuals_get = _Endpoint(
            settings={
                'response_type': ([User],),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/customFieldSettings/bundles/user/{id}/individuals',
                'operation_id': 'admin_custom_field_settings_bundles_user_id_individuals_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                    'skip',
                    'top',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                    'skip':
                        (int,),
                    'top':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                    'skip': '$skip',
                    'top': '$top',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                    'skip': 'query',
                    'top': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_custom_field_settings_bundles_user_id_individuals_get
        )

        def __admin_custom_field_settings_bundles_user_id_individuals_post(
            self,
            id,
            **kwargs
        ):
            """admin_custom_field_settings_bundles_user_id_individuals_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_custom_field_settings_bundles_user_id_individuals_post(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                user (User): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                User
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.admin_custom_field_settings_bundles_user_id_individuals_post = _Endpoint(
            settings={
                'response_type': (User,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/customFieldSettings/bundles/user/{id}/individuals',
                'operation_id': 'admin_custom_field_settings_bundles_user_id_individuals_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                    'user',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                    'user':
                        (User,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                    'user': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_custom_field_settings_bundles_user_id_individuals_post
        )

        def __admin_custom_field_settings_bundles_user_id_individuals_user_id_delete(
            self,
            id,
            user_id,
            **kwargs
        ):
            """admin_custom_field_settings_bundles_user_id_individuals_user_id_delete  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_custom_field_settings_bundles_user_id_individuals_user_id_delete(id, user_id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):
                user_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            kwargs['user_id'] = \
                user_id
            return self.call_with_http_info(**kwargs)

        self.admin_custom_field_settings_bundles_user_id_individuals_user_id_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/customFieldSettings/bundles/user/{id}/individuals/{userId}',
                'operation_id': 'admin_custom_field_settings_bundles_user_id_individuals_user_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'user_id',
                ],
                'required': [
                    'id',
                    'user_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'user_id':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'user_id': 'userId',
                },
                'location_map': {
                    'id': 'path',
                    'user_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_custom_field_settings_bundles_user_id_individuals_user_id_delete
        )

        def __admin_custom_field_settings_bundles_user_id_individuals_user_id_get(
            self,
            id,
            user_id,
            **kwargs
        ):
            """admin_custom_field_settings_bundles_user_id_individuals_user_id_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_custom_field_settings_bundles_user_id_individuals_user_id_get(id, user_id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):
                user_id (str):

            Keyword Args:
                fields (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                User
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            kwargs['user_id'] = \
                user_id
            return self.call_with_http_info(**kwargs)

        self.admin_custom_field_settings_bundles_user_id_individuals_user_id_get = _Endpoint(
            settings={
                'response_type': (User,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/customFieldSettings/bundles/user/{id}/individuals/{userId}',
                'operation_id': 'admin_custom_field_settings_bundles_user_id_individuals_user_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'user_id',
                    'fields',
                ],
                'required': [
                    'id',
                    'user_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'user_id':
                        (str,),
                    'fields':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'user_id': 'userId',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'user_id': 'path',
                    'fields': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_custom_field_settings_bundles_user_id_individuals_user_id_get
        )

        def __admin_custom_field_settings_bundles_user_id_post(
            self,
            id,
            **kwargs
        ):
            """admin_custom_field_settings_bundles_user_id_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_custom_field_settings_bundles_user_id_post(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                user_bundle (UserBundle): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                UserBundle
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.admin_custom_field_settings_bundles_user_id_post = _Endpoint(
            settings={
                'response_type': (UserBundle,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/customFieldSettings/bundles/user/{id}',
                'operation_id': 'admin_custom_field_settings_bundles_user_id_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                    'user_bundle',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                    'user_bundle':
                        (UserBundle,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                    'user_bundle': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_custom_field_settings_bundles_user_id_post
        )

        def __admin_custom_field_settings_bundles_user_post(
            self,
            **kwargs
        ):
            """admin_custom_field_settings_bundles_user_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_custom_field_settings_bundles_user_post(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                fields (str): [optional]
                user_bundle (UserBundle): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                UserBundle
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.admin_custom_field_settings_bundles_user_post = _Endpoint(
            settings={
                'response_type': (UserBundle,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/customFieldSettings/bundles/user',
                'operation_id': 'admin_custom_field_settings_bundles_user_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'fields',
                    'user_bundle',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'fields':
                        (str,),
                    'user_bundle':
                        (UserBundle,),
                },
                'attribute_map': {
                    'fields': 'fields',
                },
                'location_map': {
                    'fields': 'query',
                    'user_bundle': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_custom_field_settings_bundles_user_post
        )

        def __admin_custom_field_settings_bundles_version_get(
            self,
            **kwargs
        ):
            """admin_custom_field_settings_bundles_version_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_custom_field_settings_bundles_version_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                fields (str): [optional]
                skip (int): [optional]
                top (int): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [VersionBundle]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.admin_custom_field_settings_bundles_version_get = _Endpoint(
            settings={
                'response_type': ([VersionBundle],),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/customFieldSettings/bundles/version',
                'operation_id': 'admin_custom_field_settings_bundles_version_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'fields',
                    'skip',
                    'top',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'fields':
                        (str,),
                    'skip':
                        (int,),
                    'top':
                        (int,),
                },
                'attribute_map': {
                    'fields': 'fields',
                    'skip': '$skip',
                    'top': '$top',
                },
                'location_map': {
                    'fields': 'query',
                    'skip': 'query',
                    'top': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_custom_field_settings_bundles_version_get
        )

        def __admin_custom_field_settings_bundles_version_id_delete(
            self,
            id,
            **kwargs
        ):
            """admin_custom_field_settings_bundles_version_id_delete  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_custom_field_settings_bundles_version_id_delete(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.admin_custom_field_settings_bundles_version_id_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/customFieldSettings/bundles/version/{id}',
                'operation_id': 'admin_custom_field_settings_bundles_version_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_custom_field_settings_bundles_version_id_delete
        )

        def __admin_custom_field_settings_bundles_version_id_get(
            self,
            id,
            **kwargs
        ):
            """admin_custom_field_settings_bundles_version_id_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_custom_field_settings_bundles_version_id_get(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                VersionBundle
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.admin_custom_field_settings_bundles_version_id_get = _Endpoint(
            settings={
                'response_type': (VersionBundle,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/customFieldSettings/bundles/version/{id}',
                'operation_id': 'admin_custom_field_settings_bundles_version_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_custom_field_settings_bundles_version_id_get
        )

        def __admin_custom_field_settings_bundles_version_id_post(
            self,
            id,
            **kwargs
        ):
            """admin_custom_field_settings_bundles_version_id_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_custom_field_settings_bundles_version_id_post(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                version_bundle (VersionBundle): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                VersionBundle
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.admin_custom_field_settings_bundles_version_id_post = _Endpoint(
            settings={
                'response_type': (VersionBundle,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/customFieldSettings/bundles/version/{id}',
                'operation_id': 'admin_custom_field_settings_bundles_version_id_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                    'version_bundle',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                    'version_bundle':
                        (VersionBundle,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                    'version_bundle': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_custom_field_settings_bundles_version_id_post
        )

        def __admin_custom_field_settings_bundles_version_post(
            self,
            **kwargs
        ):
            """admin_custom_field_settings_bundles_version_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_custom_field_settings_bundles_version_post(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                fields (str): [optional]
                version_bundle (VersionBundle): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                VersionBundle
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.admin_custom_field_settings_bundles_version_post = _Endpoint(
            settings={
                'response_type': (VersionBundle,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/customFieldSettings/bundles/version',
                'operation_id': 'admin_custom_field_settings_bundles_version_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'fields',
                    'version_bundle',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'fields':
                        (str,),
                    'version_bundle':
                        (VersionBundle,),
                },
                'attribute_map': {
                    'fields': 'fields',
                },
                'location_map': {
                    'fields': 'query',
                    'version_bundle': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_custom_field_settings_bundles_version_post
        )

        def __admin_custom_field_settings_custom_fields_get(
            self,
            **kwargs
        ):
            """admin_custom_field_settings_custom_fields_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_custom_field_settings_custom_fields_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                fields (str): [optional]
                skip (int): [optional]
                top (int): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [CustomField]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.admin_custom_field_settings_custom_fields_get = _Endpoint(
            settings={
                'response_type': ([CustomField],),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/customFieldSettings/customFields',
                'operation_id': 'admin_custom_field_settings_custom_fields_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'fields',
                    'skip',
                    'top',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'fields':
                        (str,),
                    'skip':
                        (int,),
                    'top':
                        (int,),
                },
                'attribute_map': {
                    'fields': 'fields',
                    'skip': '$skip',
                    'top': '$top',
                },
                'location_map': {
                    'fields': 'query',
                    'skip': 'query',
                    'top': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_custom_field_settings_custom_fields_get
        )

        def __admin_custom_field_settings_custom_fields_id_delete(
            self,
            id,
            **kwargs
        ):
            """admin_custom_field_settings_custom_fields_id_delete  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_custom_field_settings_custom_fields_id_delete(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.admin_custom_field_settings_custom_fields_id_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/customFieldSettings/customFields/{id}',
                'operation_id': 'admin_custom_field_settings_custom_fields_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_custom_field_settings_custom_fields_id_delete
        )

        def __admin_custom_field_settings_custom_fields_id_field_defaults_get(
            self,
            id,
            **kwargs
        ):
            """admin_custom_field_settings_custom_fields_id_field_defaults_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_custom_field_settings_custom_fields_id_field_defaults_get(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                CustomFieldDefaults
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.admin_custom_field_settings_custom_fields_id_field_defaults_get = _Endpoint(
            settings={
                'response_type': (CustomFieldDefaults,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/customFieldSettings/customFields/{id}/fieldDefaults',
                'operation_id': 'admin_custom_field_settings_custom_fields_id_field_defaults_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_custom_field_settings_custom_fields_id_field_defaults_get
        )

        def __admin_custom_field_settings_custom_fields_id_field_defaults_post(
            self,
            id,
            **kwargs
        ):
            """admin_custom_field_settings_custom_fields_id_field_defaults_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_custom_field_settings_custom_fields_id_field_defaults_post(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                custom_field_defaults (CustomFieldDefaults): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                CustomFieldDefaults
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.admin_custom_field_settings_custom_fields_id_field_defaults_post = _Endpoint(
            settings={
                'response_type': (CustomFieldDefaults,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/customFieldSettings/customFields/{id}/fieldDefaults',
                'operation_id': 'admin_custom_field_settings_custom_fields_id_field_defaults_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                    'custom_field_defaults',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                    'custom_field_defaults':
                        (CustomFieldDefaults,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                    'custom_field_defaults': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_custom_field_settings_custom_fields_id_field_defaults_post
        )

        def __admin_custom_field_settings_custom_fields_id_get(
            self,
            id,
            **kwargs
        ):
            """admin_custom_field_settings_custom_fields_id_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_custom_field_settings_custom_fields_id_get(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                CustomField
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.admin_custom_field_settings_custom_fields_id_get = _Endpoint(
            settings={
                'response_type': (CustomField,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/customFieldSettings/customFields/{id}',
                'operation_id': 'admin_custom_field_settings_custom_fields_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_custom_field_settings_custom_fields_id_get
        )

        def __admin_custom_field_settings_custom_fields_id_instances_get(
            self,
            id,
            **kwargs
        ):
            """admin_custom_field_settings_custom_fields_id_instances_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_custom_field_settings_custom_fields_id_instances_get(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                skip (int): [optional]
                top (int): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [ProjectCustomField]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.admin_custom_field_settings_custom_fields_id_instances_get = _Endpoint(
            settings={
                'response_type': ([ProjectCustomField],),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/customFieldSettings/customFields/{id}/instances',
                'operation_id': 'admin_custom_field_settings_custom_fields_id_instances_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                    'skip',
                    'top',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                    'skip':
                        (int,),
                    'top':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                    'skip': '$skip',
                    'top': '$top',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                    'skip': 'query',
                    'top': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_custom_field_settings_custom_fields_id_instances_get
        )

        def __admin_custom_field_settings_custom_fields_id_post(
            self,
            id,
            **kwargs
        ):
            """admin_custom_field_settings_custom_fields_id_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_custom_field_settings_custom_fields_id_post(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                custom_field (CustomField): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                CustomField
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.admin_custom_field_settings_custom_fields_id_post = _Endpoint(
            settings={
                'response_type': (CustomField,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/customFieldSettings/customFields/{id}',
                'operation_id': 'admin_custom_field_settings_custom_fields_id_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                    'custom_field',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                    'custom_field':
                        (CustomField,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                    'custom_field': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_custom_field_settings_custom_fields_id_post
        )

        def __admin_custom_field_settings_custom_fields_post(
            self,
            **kwargs
        ):
            """admin_custom_field_settings_custom_fields_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_custom_field_settings_custom_fields_post(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                fields (str): [optional]
                custom_field (CustomField): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                CustomField
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.admin_custom_field_settings_custom_fields_post = _Endpoint(
            settings={
                'response_type': (CustomField,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/customFieldSettings/customFields',
                'operation_id': 'admin_custom_field_settings_custom_fields_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'fields',
                    'custom_field',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'fields':
                        (str,),
                    'custom_field':
                        (CustomField,),
                },
                'attribute_map': {
                    'fields': 'fields',
                },
                'location_map': {
                    'fields': 'query',
                    'custom_field': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_custom_field_settings_custom_fields_post
        )

        def __admin_custom_field_settings_types_get(
            self,
            **kwargs
        ):
            """admin_custom_field_settings_types_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_custom_field_settings_types_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                fields (str): [optional]
                skip (int): [optional]
                top (int): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [FieldType]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.admin_custom_field_settings_types_get = _Endpoint(
            settings={
                'response_type': ([FieldType],),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/customFieldSettings/types',
                'operation_id': 'admin_custom_field_settings_types_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'fields',
                    'skip',
                    'top',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'fields':
                        (str,),
                    'skip':
                        (int,),
                    'top':
                        (int,),
                },
                'attribute_map': {
                    'fields': 'fields',
                    'skip': '$skip',
                    'top': '$top',
                },
                'location_map': {
                    'fields': 'query',
                    'skip': 'query',
                    'top': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_custom_field_settings_types_get
        )

        def __admin_database_backup_backups_get(
            self,
            **kwargs
        ):
            """admin_database_backup_backups_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_database_backup_backups_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                fields (str): [optional]
                skip (int): [optional]
                top (int): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [BackupFile]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.admin_database_backup_backups_get = _Endpoint(
            settings={
                'response_type': ([BackupFile],),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/databaseBackup/backups',
                'operation_id': 'admin_database_backup_backups_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'fields',
                    'skip',
                    'top',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'fields':
                        (str,),
                    'skip':
                        (int,),
                    'top':
                        (int,),
                },
                'attribute_map': {
                    'fields': 'fields',
                    'skip': '$skip',
                    'top': '$top',
                },
                'location_map': {
                    'fields': 'query',
                    'skip': 'query',
                    'top': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_database_backup_backups_get
        )

        def __admin_database_backup_backups_id_get(
            self,
            id,
            **kwargs
        ):
            """admin_database_backup_backups_id_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_database_backup_backups_id_get(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                BackupFile
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.admin_database_backup_backups_id_get = _Endpoint(
            settings={
                'response_type': (BackupFile,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/databaseBackup/backups/{id}',
                'operation_id': 'admin_database_backup_backups_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_database_backup_backups_id_get
        )

        def __admin_database_backup_settings_backup_status_get(
            self,
            **kwargs
        ):
            """admin_database_backup_settings_backup_status_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_database_backup_settings_backup_status_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                fields (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                BackupStatus
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.admin_database_backup_settings_backup_status_get = _Endpoint(
            settings={
                'response_type': (BackupStatus,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/databaseBackup/settings/backupStatus',
                'operation_id': 'admin_database_backup_settings_backup_status_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'fields',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'fields':
                        (str,),
                },
                'attribute_map': {
                    'fields': 'fields',
                },
                'location_map': {
                    'fields': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_database_backup_settings_backup_status_get
        )

        def __admin_database_backup_settings_get(
            self,
            **kwargs
        ):
            """admin_database_backup_settings_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_database_backup_settings_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                fields (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DatabaseBackupSettings
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.admin_database_backup_settings_get = _Endpoint(
            settings={
                'response_type': (DatabaseBackupSettings,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/databaseBackup/settings',
                'operation_id': 'admin_database_backup_settings_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'fields',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'fields':
                        (str,),
                },
                'attribute_map': {
                    'fields': 'fields',
                },
                'location_map': {
                    'fields': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_database_backup_settings_get
        )

        def __admin_database_backup_settings_post(
            self,
            **kwargs
        ):
            """admin_database_backup_settings_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_database_backup_settings_post(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                fields (str): [optional]
                database_backup_settings (DatabaseBackupSettings): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DatabaseBackupSettings
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.admin_database_backup_settings_post = _Endpoint(
            settings={
                'response_type': (DatabaseBackupSettings,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/databaseBackup/settings',
                'operation_id': 'admin_database_backup_settings_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'fields',
                    'database_backup_settings',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'fields':
                        (str,),
                    'database_backup_settings':
                        (DatabaseBackupSettings,),
                },
                'attribute_map': {
                    'fields': 'fields',
                },
                'location_map': {
                    'fields': 'query',
                    'database_backup_settings': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_database_backup_settings_post
        )

        def __admin_global_settings_appearance_settings_get(
            self,
            **kwargs
        ):
            """admin_global_settings_appearance_settings_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_global_settings_appearance_settings_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                fields (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AppearanceSettings
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.admin_global_settings_appearance_settings_get = _Endpoint(
            settings={
                'response_type': (AppearanceSettings,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/globalSettings/appearanceSettings',
                'operation_id': 'admin_global_settings_appearance_settings_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'fields',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'fields':
                        (str,),
                },
                'attribute_map': {
                    'fields': 'fields',
                },
                'location_map': {
                    'fields': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_global_settings_appearance_settings_get
        )

        def __admin_global_settings_appearance_settings_post(
            self,
            **kwargs
        ):
            """admin_global_settings_appearance_settings_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_global_settings_appearance_settings_post(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                fields (str): [optional]
                appearance_settings (AppearanceSettings): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AppearanceSettings
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.admin_global_settings_appearance_settings_post = _Endpoint(
            settings={
                'response_type': (AppearanceSettings,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/globalSettings/appearanceSettings',
                'operation_id': 'admin_global_settings_appearance_settings_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'fields',
                    'appearance_settings',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'fields':
                        (str,),
                    'appearance_settings':
                        (AppearanceSettings,),
                },
                'attribute_map': {
                    'fields': 'fields',
                },
                'location_map': {
                    'fields': 'query',
                    'appearance_settings': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_global_settings_appearance_settings_post
        )

        def __admin_global_settings_get(
            self,
            **kwargs
        ):
            """admin_global_settings_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_global_settings_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                fields (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                GlobalSettings
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.admin_global_settings_get = _Endpoint(
            settings={
                'response_type': (GlobalSettings,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/globalSettings',
                'operation_id': 'admin_global_settings_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'fields',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'fields':
                        (str,),
                },
                'attribute_map': {
                    'fields': 'fields',
                },
                'location_map': {
                    'fields': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_global_settings_get
        )

        def __admin_global_settings_license_get(
            self,
            **kwargs
        ):
            """admin_global_settings_license_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_global_settings_license_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                fields (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                License
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.admin_global_settings_license_get = _Endpoint(
            settings={
                'response_type': (License,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/globalSettings/license',
                'operation_id': 'admin_global_settings_license_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'fields',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'fields':
                        (str,),
                },
                'attribute_map': {
                    'fields': 'fields',
                },
                'location_map': {
                    'fields': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_global_settings_license_get
        )

        def __admin_global_settings_license_post(
            self,
            **kwargs
        ):
            """admin_global_settings_license_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_global_settings_license_post(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                fields (str): [optional]
                license (License): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                License
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.admin_global_settings_license_post = _Endpoint(
            settings={
                'response_type': (License,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/globalSettings/license',
                'operation_id': 'admin_global_settings_license_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'fields',
                    'license',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'fields':
                        (str,),
                    'license':
                        (License,),
                },
                'attribute_map': {
                    'fields': 'fields',
                },
                'location_map': {
                    'fields': 'query',
                    'license': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_global_settings_license_post
        )

        def __admin_global_settings_locale_settings_get(
            self,
            **kwargs
        ):
            """admin_global_settings_locale_settings_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_global_settings_locale_settings_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                fields (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                LocaleSettings
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.admin_global_settings_locale_settings_get = _Endpoint(
            settings={
                'response_type': (LocaleSettings,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/globalSettings/localeSettings',
                'operation_id': 'admin_global_settings_locale_settings_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'fields',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'fields':
                        (str,),
                },
                'attribute_map': {
                    'fields': 'fields',
                },
                'location_map': {
                    'fields': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_global_settings_locale_settings_get
        )

        def __admin_global_settings_locale_settings_post(
            self,
            **kwargs
        ):
            """admin_global_settings_locale_settings_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_global_settings_locale_settings_post(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                fields (str): [optional]
                locale_settings (LocaleSettings): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                LocaleSettings
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.admin_global_settings_locale_settings_post = _Endpoint(
            settings={
                'response_type': (LocaleSettings,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/globalSettings/localeSettings',
                'operation_id': 'admin_global_settings_locale_settings_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'fields',
                    'locale_settings',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'fields':
                        (str,),
                    'locale_settings':
                        (LocaleSettings,),
                },
                'attribute_map': {
                    'fields': 'fields',
                },
                'location_map': {
                    'fields': 'query',
                    'locale_settings': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_global_settings_locale_settings_post
        )

        def __admin_global_settings_notification_settings_get(
            self,
            **kwargs
        ):
            """admin_global_settings_notification_settings_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_global_settings_notification_settings_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                fields (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                NotificationSettings
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.admin_global_settings_notification_settings_get = _Endpoint(
            settings={
                'response_type': (NotificationSettings,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/globalSettings/notificationSettings',
                'operation_id': 'admin_global_settings_notification_settings_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'fields',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'fields':
                        (str,),
                },
                'attribute_map': {
                    'fields': 'fields',
                },
                'location_map': {
                    'fields': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_global_settings_notification_settings_get
        )

        def __admin_global_settings_notification_settings_post(
            self,
            **kwargs
        ):
            """admin_global_settings_notification_settings_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_global_settings_notification_settings_post(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                fields (str): [optional]
                notification_settings (NotificationSettings): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                NotificationSettings
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.admin_global_settings_notification_settings_post = _Endpoint(
            settings={
                'response_type': (NotificationSettings,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/globalSettings/notificationSettings',
                'operation_id': 'admin_global_settings_notification_settings_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'fields',
                    'notification_settings',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'fields':
                        (str,),
                    'notification_settings':
                        (NotificationSettings,),
                },
                'attribute_map': {
                    'fields': 'fields',
                },
                'location_map': {
                    'fields': 'query',
                    'notification_settings': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_global_settings_notification_settings_post
        )

        def __admin_global_settings_post(
            self,
            **kwargs
        ):
            """admin_global_settings_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_global_settings_post(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                fields (str): [optional]
                global_settings (GlobalSettings): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                GlobalSettings
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.admin_global_settings_post = _Endpoint(
            settings={
                'response_type': (GlobalSettings,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/globalSettings',
                'operation_id': 'admin_global_settings_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'fields',
                    'global_settings',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'fields':
                        (str,),
                    'global_settings':
                        (GlobalSettings,),
                },
                'attribute_map': {
                    'fields': 'fields',
                },
                'location_map': {
                    'fields': 'query',
                    'global_settings': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_global_settings_post
        )

        def __admin_global_settings_rest_settings_get(
            self,
            **kwargs
        ):
            """admin_global_settings_rest_settings_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_global_settings_rest_settings_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                fields (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                RestCorsSettings
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.admin_global_settings_rest_settings_get = _Endpoint(
            settings={
                'response_type': (RestCorsSettings,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/globalSettings/restSettings',
                'operation_id': 'admin_global_settings_rest_settings_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'fields',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'fields':
                        (str,),
                },
                'attribute_map': {
                    'fields': 'fields',
                },
                'location_map': {
                    'fields': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_global_settings_rest_settings_get
        )

        def __admin_global_settings_rest_settings_post(
            self,
            **kwargs
        ):
            """admin_global_settings_rest_settings_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_global_settings_rest_settings_post(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                fields (str): [optional]
                rest_cors_settings (RestCorsSettings): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                RestCorsSettings
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.admin_global_settings_rest_settings_post = _Endpoint(
            settings={
                'response_type': (RestCorsSettings,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/globalSettings/restSettings',
                'operation_id': 'admin_global_settings_rest_settings_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'fields',
                    'rest_cors_settings',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'fields':
                        (str,),
                    'rest_cors_settings':
                        (RestCorsSettings,),
                },
                'attribute_map': {
                    'fields': 'fields',
                },
                'location_map': {
                    'fields': 'query',
                    'rest_cors_settings': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_global_settings_rest_settings_post
        )

        def __admin_global_settings_system_settings_get(
            self,
            **kwargs
        ):
            """admin_global_settings_system_settings_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_global_settings_system_settings_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                fields (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                SystemSettings
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.admin_global_settings_system_settings_get = _Endpoint(
            settings={
                'response_type': (SystemSettings,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/globalSettings/systemSettings',
                'operation_id': 'admin_global_settings_system_settings_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'fields',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'fields':
                        (str,),
                },
                'attribute_map': {
                    'fields': 'fields',
                },
                'location_map': {
                    'fields': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_global_settings_system_settings_get
        )

        def __admin_global_settings_system_settings_post(
            self,
            **kwargs
        ):
            """admin_global_settings_system_settings_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_global_settings_system_settings_post(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                fields (str): [optional]
                system_settings (SystemSettings): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                SystemSettings
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.admin_global_settings_system_settings_post = _Endpoint(
            settings={
                'response_type': (SystemSettings,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/globalSettings/systemSettings',
                'operation_id': 'admin_global_settings_system_settings_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'fields',
                    'system_settings',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'fields':
                        (str,),
                    'system_settings':
                        (SystemSettings,),
                },
                'attribute_map': {
                    'fields': 'fields',
                },
                'location_map': {
                    'fields': 'query',
                    'system_settings': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_global_settings_system_settings_post
        )

        def __admin_projects_get(
            self,
            **kwargs
        ):
            """admin_projects_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_projects_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                fields (str): [optional]
                skip (int): [optional]
                top (int): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Project]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.admin_projects_get = _Endpoint(
            settings={
                'response_type': ([Project],),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/projects',
                'operation_id': 'admin_projects_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'fields',
                    'skip',
                    'top',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'fields':
                        (str,),
                    'skip':
                        (int,),
                    'top':
                        (int,),
                },
                'attribute_map': {
                    'fields': 'fields',
                    'skip': '$skip',
                    'top': '$top',
                },
                'location_map': {
                    'fields': 'query',
                    'skip': 'query',
                    'top': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_projects_get
        )

        def __admin_projects_id_custom_fields_get(
            self,
            id,
            **kwargs
        ):
            """admin_projects_id_custom_fields_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_projects_id_custom_fields_get(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                skip (int): [optional]
                top (int): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [ProjectCustomField]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.admin_projects_id_custom_fields_get = _Endpoint(
            settings={
                'response_type': ([ProjectCustomField],),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/projects/{id}/customFields',
                'operation_id': 'admin_projects_id_custom_fields_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                    'skip',
                    'top',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                    'skip':
                        (int,),
                    'top':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                    'skip': '$skip',
                    'top': '$top',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                    'skip': 'query',
                    'top': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_projects_id_custom_fields_get
        )

        def __admin_projects_id_custom_fields_post(
            self,
            id,
            **kwargs
        ):
            """admin_projects_id_custom_fields_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_projects_id_custom_fields_post(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                project_custom_field (ProjectCustomField): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ProjectCustomField
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.admin_projects_id_custom_fields_post = _Endpoint(
            settings={
                'response_type': (ProjectCustomField,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/projects/{id}/customFields',
                'operation_id': 'admin_projects_id_custom_fields_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                    'project_custom_field',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                    'project_custom_field':
                        (ProjectCustomField,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                    'project_custom_field': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_projects_id_custom_fields_post
        )

        def __admin_projects_id_custom_fields_project_custom_field_id_delete(
            self,
            id,
            project_custom_field_id,
            **kwargs
        ):
            """admin_projects_id_custom_fields_project_custom_field_id_delete  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_projects_id_custom_fields_project_custom_field_id_delete(id, project_custom_field_id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):
                project_custom_field_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            kwargs['project_custom_field_id'] = \
                project_custom_field_id
            return self.call_with_http_info(**kwargs)

        self.admin_projects_id_custom_fields_project_custom_field_id_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/projects/{id}/customFields/{projectCustomFieldId}',
                'operation_id': 'admin_projects_id_custom_fields_project_custom_field_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'project_custom_field_id',
                ],
                'required': [
                    'id',
                    'project_custom_field_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'project_custom_field_id':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'project_custom_field_id': 'projectCustomFieldId',
                },
                'location_map': {
                    'id': 'path',
                    'project_custom_field_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_projects_id_custom_fields_project_custom_field_id_delete
        )

        def __admin_projects_id_custom_fields_project_custom_field_id_get(
            self,
            id,
            project_custom_field_id,
            **kwargs
        ):
            """admin_projects_id_custom_fields_project_custom_field_id_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_projects_id_custom_fields_project_custom_field_id_get(id, project_custom_field_id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):
                project_custom_field_id (str):

            Keyword Args:
                fields (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ProjectCustomField
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            kwargs['project_custom_field_id'] = \
                project_custom_field_id
            return self.call_with_http_info(**kwargs)

        self.admin_projects_id_custom_fields_project_custom_field_id_get = _Endpoint(
            settings={
                'response_type': (ProjectCustomField,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/projects/{id}/customFields/{projectCustomFieldId}',
                'operation_id': 'admin_projects_id_custom_fields_project_custom_field_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'project_custom_field_id',
                    'fields',
                ],
                'required': [
                    'id',
                    'project_custom_field_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'project_custom_field_id':
                        (str,),
                    'fields':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'project_custom_field_id': 'projectCustomFieldId',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'project_custom_field_id': 'path',
                    'fields': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_projects_id_custom_fields_project_custom_field_id_get
        )

        def __admin_projects_id_custom_fields_project_custom_field_id_post(
            self,
            id,
            project_custom_field_id,
            **kwargs
        ):
            """admin_projects_id_custom_fields_project_custom_field_id_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_projects_id_custom_fields_project_custom_field_id_post(id, project_custom_field_id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):
                project_custom_field_id (str):

            Keyword Args:
                fields (str): [optional]
                project_custom_field (ProjectCustomField): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ProjectCustomField
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            kwargs['project_custom_field_id'] = \
                project_custom_field_id
            return self.call_with_http_info(**kwargs)

        self.admin_projects_id_custom_fields_project_custom_field_id_post = _Endpoint(
            settings={
                'response_type': (ProjectCustomField,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/projects/{id}/customFields/{projectCustomFieldId}',
                'operation_id': 'admin_projects_id_custom_fields_project_custom_field_id_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'project_custom_field_id',
                    'fields',
                    'project_custom_field',
                ],
                'required': [
                    'id',
                    'project_custom_field_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'project_custom_field_id':
                        (str,),
                    'fields':
                        (str,),
                    'project_custom_field':
                        (ProjectCustomField,),
                },
                'attribute_map': {
                    'id': 'id',
                    'project_custom_field_id': 'projectCustomFieldId',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'project_custom_field_id': 'path',
                    'fields': 'query',
                    'project_custom_field': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_projects_id_custom_fields_project_custom_field_id_post
        )

        def __admin_projects_id_delete(
            self,
            id,
            **kwargs
        ):
            """admin_projects_id_delete  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_projects_id_delete(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.admin_projects_id_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/projects/{id}',
                'operation_id': 'admin_projects_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_projects_id_delete
        )

        def __admin_projects_id_get(
            self,
            id,
            **kwargs
        ):
            """admin_projects_id_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_projects_id_get(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Project
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.admin_projects_id_get = _Endpoint(
            settings={
                'response_type': (Project,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/projects/{id}',
                'operation_id': 'admin_projects_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_projects_id_get
        )

        def __admin_projects_id_issues_get(
            self,
            id,
            **kwargs
        ):
            """admin_projects_id_issues_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_projects_id_issues_get(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                skip (int): [optional]
                top (int): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Issue]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.admin_projects_id_issues_get = _Endpoint(
            settings={
                'response_type': ([Issue],),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/projects/{id}/issues',
                'operation_id': 'admin_projects_id_issues_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                    'skip',
                    'top',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                    'skip':
                        (int,),
                    'top':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                    'skip': '$skip',
                    'top': '$top',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                    'skip': 'query',
                    'top': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_projects_id_issues_get
        )

        def __admin_projects_id_issues_issue_id_delete(
            self,
            id,
            issue_id,
            **kwargs
        ):
            """admin_projects_id_issues_issue_id_delete  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_projects_id_issues_issue_id_delete(id, issue_id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):
                issue_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            kwargs['issue_id'] = \
                issue_id
            return self.call_with_http_info(**kwargs)

        self.admin_projects_id_issues_issue_id_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/projects/{id}/issues/{issueId}',
                'operation_id': 'admin_projects_id_issues_issue_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'issue_id',
                ],
                'required': [
                    'id',
                    'issue_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'issue_id':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'issue_id': 'issueId',
                },
                'location_map': {
                    'id': 'path',
                    'issue_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_projects_id_issues_issue_id_delete
        )

        def __admin_projects_id_issues_issue_id_get(
            self,
            id,
            issue_id,
            **kwargs
        ):
            """admin_projects_id_issues_issue_id_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_projects_id_issues_issue_id_get(id, issue_id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):
                issue_id (str):

            Keyword Args:
                fields (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Issue
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            kwargs['issue_id'] = \
                issue_id
            return self.call_with_http_info(**kwargs)

        self.admin_projects_id_issues_issue_id_get = _Endpoint(
            settings={
                'response_type': (Issue,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/projects/{id}/issues/{issueId}',
                'operation_id': 'admin_projects_id_issues_issue_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'issue_id',
                    'fields',
                ],
                'required': [
                    'id',
                    'issue_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'issue_id':
                        (str,),
                    'fields':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'issue_id': 'issueId',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'issue_id': 'path',
                    'fields': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_projects_id_issues_issue_id_get
        )

        def __admin_projects_id_issues_issue_id_post(
            self,
            id,
            issue_id,
            **kwargs
        ):
            """admin_projects_id_issues_issue_id_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_projects_id_issues_issue_id_post(id, issue_id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):
                issue_id (str):

            Keyword Args:
                fields (str): [optional]
                issue (Issue): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Issue
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            kwargs['issue_id'] = \
                issue_id
            return self.call_with_http_info(**kwargs)

        self.admin_projects_id_issues_issue_id_post = _Endpoint(
            settings={
                'response_type': (Issue,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/projects/{id}/issues/{issueId}',
                'operation_id': 'admin_projects_id_issues_issue_id_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'issue_id',
                    'fields',
                    'issue',
                ],
                'required': [
                    'id',
                    'issue_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'issue_id':
                        (str,),
                    'fields':
                        (str,),
                    'issue':
                        (Issue,),
                },
                'attribute_map': {
                    'id': 'id',
                    'issue_id': 'issueId',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'issue_id': 'path',
                    'fields': 'query',
                    'issue': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_projects_id_issues_issue_id_post
        )

        def __admin_projects_id_issues_post(
            self,
            id,
            **kwargs
        ):
            """admin_projects_id_issues_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_projects_id_issues_post(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                issue (Issue): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Issue
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.admin_projects_id_issues_post = _Endpoint(
            settings={
                'response_type': (Issue,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/projects/{id}/issues',
                'operation_id': 'admin_projects_id_issues_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                    'issue',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                    'issue':
                        (Issue,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                    'issue': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_projects_id_issues_post
        )

        def __admin_projects_id_post(
            self,
            id,
            **kwargs
        ):
            """admin_projects_id_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_projects_id_post(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                project (Project): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Project
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.admin_projects_id_post = _Endpoint(
            settings={
                'response_type': (Project,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/projects/{id}',
                'operation_id': 'admin_projects_id_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                    'project',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                    'project':
                        (Project,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                    'project': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_projects_id_post
        )

        def __admin_projects_id_time_tracking_settings_get(
            self,
            id,
            **kwargs
        ):
            """admin_projects_id_time_tracking_settings_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_projects_id_time_tracking_settings_get(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ProjectTimeTrackingSettings
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.admin_projects_id_time_tracking_settings_get = _Endpoint(
            settings={
                'response_type': (ProjectTimeTrackingSettings,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/projects/{id}/timeTrackingSettings',
                'operation_id': 'admin_projects_id_time_tracking_settings_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_projects_id_time_tracking_settings_get
        )

        def __admin_projects_id_time_tracking_settings_post(
            self,
            id,
            **kwargs
        ):
            """admin_projects_id_time_tracking_settings_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_projects_id_time_tracking_settings_post(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                project_time_tracking_settings (ProjectTimeTrackingSettings): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ProjectTimeTrackingSettings
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.admin_projects_id_time_tracking_settings_post = _Endpoint(
            settings={
                'response_type': (ProjectTimeTrackingSettings,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/projects/{id}/timeTrackingSettings',
                'operation_id': 'admin_projects_id_time_tracking_settings_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                    'project_time_tracking_settings',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                    'project_time_tracking_settings':
                        (ProjectTimeTrackingSettings,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                    'project_time_tracking_settings': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_projects_id_time_tracking_settings_post
        )

        def __admin_projects_id_time_tracking_settings_work_item_types_get(
            self,
            id,
            **kwargs
        ):
            """admin_projects_id_time_tracking_settings_work_item_types_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_projects_id_time_tracking_settings_work_item_types_get(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                skip (int): [optional]
                top (int): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [WorkItemType]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.admin_projects_id_time_tracking_settings_work_item_types_get = _Endpoint(
            settings={
                'response_type': ([WorkItemType],),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/projects/{id}/timeTrackingSettings/workItemTypes',
                'operation_id': 'admin_projects_id_time_tracking_settings_work_item_types_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                    'skip',
                    'top',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                    'skip':
                        (int,),
                    'top':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                    'skip': '$skip',
                    'top': '$top',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                    'skip': 'query',
                    'top': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_projects_id_time_tracking_settings_work_item_types_get
        )

        def __admin_projects_id_time_tracking_settings_work_item_types_post(
            self,
            id,
            **kwargs
        ):
            """admin_projects_id_time_tracking_settings_work_item_types_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_projects_id_time_tracking_settings_work_item_types_post(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                work_item_type (WorkItemType): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                WorkItemType
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.admin_projects_id_time_tracking_settings_work_item_types_post = _Endpoint(
            settings={
                'response_type': (WorkItemType,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/projects/{id}/timeTrackingSettings/workItemTypes',
                'operation_id': 'admin_projects_id_time_tracking_settings_work_item_types_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                    'work_item_type',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                    'work_item_type':
                        (WorkItemType,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                    'work_item_type': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_projects_id_time_tracking_settings_work_item_types_post
        )

        def __admin_projects_id_time_tracking_settings_work_item_types_work_item_type_id_delete(
            self,
            id,
            work_item_type_id,
            **kwargs
        ):
            """admin_projects_id_time_tracking_settings_work_item_types_work_item_type_id_delete  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_projects_id_time_tracking_settings_work_item_types_work_item_type_id_delete(id, work_item_type_id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):
                work_item_type_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            kwargs['work_item_type_id'] = \
                work_item_type_id
            return self.call_with_http_info(**kwargs)

        self.admin_projects_id_time_tracking_settings_work_item_types_work_item_type_id_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/projects/{id}/timeTrackingSettings/workItemTypes/{workItemTypeId}',
                'operation_id': 'admin_projects_id_time_tracking_settings_work_item_types_work_item_type_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'work_item_type_id',
                ],
                'required': [
                    'id',
                    'work_item_type_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'work_item_type_id':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'work_item_type_id': 'workItemTypeId',
                },
                'location_map': {
                    'id': 'path',
                    'work_item_type_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_projects_id_time_tracking_settings_work_item_types_work_item_type_id_delete
        )

        def __admin_projects_id_time_tracking_settings_work_item_types_work_item_type_id_get(
            self,
            id,
            work_item_type_id,
            **kwargs
        ):
            """admin_projects_id_time_tracking_settings_work_item_types_work_item_type_id_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_projects_id_time_tracking_settings_work_item_types_work_item_type_id_get(id, work_item_type_id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):
                work_item_type_id (str):

            Keyword Args:
                fields (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                WorkItemType
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            kwargs['work_item_type_id'] = \
                work_item_type_id
            return self.call_with_http_info(**kwargs)

        self.admin_projects_id_time_tracking_settings_work_item_types_work_item_type_id_get = _Endpoint(
            settings={
                'response_type': (WorkItemType,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/projects/{id}/timeTrackingSettings/workItemTypes/{workItemTypeId}',
                'operation_id': 'admin_projects_id_time_tracking_settings_work_item_types_work_item_type_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'work_item_type_id',
                    'fields',
                ],
                'required': [
                    'id',
                    'work_item_type_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'work_item_type_id':
                        (str,),
                    'fields':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'work_item_type_id': 'workItemTypeId',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'work_item_type_id': 'path',
                    'fields': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_projects_id_time_tracking_settings_work_item_types_work_item_type_id_get
        )

        def __admin_projects_post(
            self,
            **kwargs
        ):
            """admin_projects_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_projects_post(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                template (str): If the `template` is not specified, then the new project will use the default settings. <emphasis>Optional</emphasis>. Lets you specify the template to use for the new project. Possible values: `scrum`, `kanban`.. [optional]
                fields (str): [optional]
                project (Project): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Project
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.admin_projects_post = _Endpoint(
            settings={
                'response_type': (Project,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/projects',
                'operation_id': 'admin_projects_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'template',
                    'fields',
                    'project',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'template':
                        (str,),
                    'fields':
                        (str,),
                    'project':
                        (Project,),
                },
                'attribute_map': {
                    'template': 'template',
                    'fields': 'fields',
                },
                'location_map': {
                    'template': 'query',
                    'fields': 'query',
                    'project': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_projects_post
        )

        def __admin_telemetry_get(
            self,
            **kwargs
        ):
            """admin_telemetry_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_telemetry_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                fields (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Telemetry
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.admin_telemetry_get = _Endpoint(
            settings={
                'response_type': (Telemetry,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/telemetry',
                'operation_id': 'admin_telemetry_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'fields',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'fields':
                        (str,),
                },
                'attribute_map': {
                    'fields': 'fields',
                },
                'location_map': {
                    'fields': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_telemetry_get
        )

        def __admin_time_tracking_settings_get(
            self,
            **kwargs
        ):
            """admin_time_tracking_settings_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_time_tracking_settings_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                fields (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                GlobalTimeTrackingSettings
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.admin_time_tracking_settings_get = _Endpoint(
            settings={
                'response_type': (GlobalTimeTrackingSettings,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/timeTrackingSettings',
                'operation_id': 'admin_time_tracking_settings_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'fields',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'fields':
                        (str,),
                },
                'attribute_map': {
                    'fields': 'fields',
                },
                'location_map': {
                    'fields': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_time_tracking_settings_get
        )

        def __admin_time_tracking_settings_work_item_types_get(
            self,
            **kwargs
        ):
            """admin_time_tracking_settings_work_item_types_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_time_tracking_settings_work_item_types_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                fields (str): [optional]
                skip (int): [optional]
                top (int): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [WorkItemType]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.admin_time_tracking_settings_work_item_types_get = _Endpoint(
            settings={
                'response_type': ([WorkItemType],),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/timeTrackingSettings/workItemTypes',
                'operation_id': 'admin_time_tracking_settings_work_item_types_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'fields',
                    'skip',
                    'top',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'fields':
                        (str,),
                    'skip':
                        (int,),
                    'top':
                        (int,),
                },
                'attribute_map': {
                    'fields': 'fields',
                    'skip': '$skip',
                    'top': '$top',
                },
                'location_map': {
                    'fields': 'query',
                    'skip': 'query',
                    'top': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_time_tracking_settings_work_item_types_get
        )

        def __admin_time_tracking_settings_work_item_types_post(
            self,
            **kwargs
        ):
            """admin_time_tracking_settings_work_item_types_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_time_tracking_settings_work_item_types_post(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                fields (str): [optional]
                work_item_type (WorkItemType): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                WorkItemType
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.admin_time_tracking_settings_work_item_types_post = _Endpoint(
            settings={
                'response_type': (WorkItemType,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/timeTrackingSettings/workItemTypes',
                'operation_id': 'admin_time_tracking_settings_work_item_types_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'fields',
                    'work_item_type',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'fields':
                        (str,),
                    'work_item_type':
                        (WorkItemType,),
                },
                'attribute_map': {
                    'fields': 'fields',
                },
                'location_map': {
                    'fields': 'query',
                    'work_item_type': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_time_tracking_settings_work_item_types_post
        )

        def __admin_time_tracking_settings_work_item_types_work_item_type_id_delete(
            self,
            work_item_type_id,
            **kwargs
        ):
            """admin_time_tracking_settings_work_item_types_work_item_type_id_delete  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_time_tracking_settings_work_item_types_work_item_type_id_delete(work_item_type_id, async_req=True)
            >>> result = thread.get()

            Args:
                work_item_type_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['work_item_type_id'] = \
                work_item_type_id
            return self.call_with_http_info(**kwargs)

        self.admin_time_tracking_settings_work_item_types_work_item_type_id_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/timeTrackingSettings/workItemTypes/{workItemTypeId}',
                'operation_id': 'admin_time_tracking_settings_work_item_types_work_item_type_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'work_item_type_id',
                ],
                'required': [
                    'work_item_type_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'work_item_type_id':
                        (str,),
                },
                'attribute_map': {
                    'work_item_type_id': 'workItemTypeId',
                },
                'location_map': {
                    'work_item_type_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_time_tracking_settings_work_item_types_work_item_type_id_delete
        )

        def __admin_time_tracking_settings_work_item_types_work_item_type_id_get(
            self,
            work_item_type_id,
            **kwargs
        ):
            """admin_time_tracking_settings_work_item_types_work_item_type_id_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_time_tracking_settings_work_item_types_work_item_type_id_get(work_item_type_id, async_req=True)
            >>> result = thread.get()

            Args:
                work_item_type_id (str):

            Keyword Args:
                fields (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                WorkItemType
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['work_item_type_id'] = \
                work_item_type_id
            return self.call_with_http_info(**kwargs)

        self.admin_time_tracking_settings_work_item_types_work_item_type_id_get = _Endpoint(
            settings={
                'response_type': (WorkItemType,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/timeTrackingSettings/workItemTypes/{workItemTypeId}',
                'operation_id': 'admin_time_tracking_settings_work_item_types_work_item_type_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'work_item_type_id',
                    'fields',
                ],
                'required': [
                    'work_item_type_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'work_item_type_id':
                        (str,),
                    'fields':
                        (str,),
                },
                'attribute_map': {
                    'work_item_type_id': 'workItemTypeId',
                    'fields': 'fields',
                },
                'location_map': {
                    'work_item_type_id': 'path',
                    'fields': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_time_tracking_settings_work_item_types_work_item_type_id_get
        )

        def __admin_time_tracking_settings_work_item_types_work_item_type_id_post(
            self,
            work_item_type_id,
            **kwargs
        ):
            """admin_time_tracking_settings_work_item_types_work_item_type_id_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_time_tracking_settings_work_item_types_work_item_type_id_post(work_item_type_id, async_req=True)
            >>> result = thread.get()

            Args:
                work_item_type_id (str):

            Keyword Args:
                fields (str): [optional]
                work_item_type (WorkItemType): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                WorkItemType
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['work_item_type_id'] = \
                work_item_type_id
            return self.call_with_http_info(**kwargs)

        self.admin_time_tracking_settings_work_item_types_work_item_type_id_post = _Endpoint(
            settings={
                'response_type': (WorkItemType,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/timeTrackingSettings/workItemTypes/{workItemTypeId}',
                'operation_id': 'admin_time_tracking_settings_work_item_types_work_item_type_id_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'work_item_type_id',
                    'fields',
                    'work_item_type',
                ],
                'required': [
                    'work_item_type_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'work_item_type_id':
                        (str,),
                    'fields':
                        (str,),
                    'work_item_type':
                        (WorkItemType,),
                },
                'attribute_map': {
                    'work_item_type_id': 'workItemTypeId',
                    'fields': 'fields',
                },
                'location_map': {
                    'work_item_type_id': 'path',
                    'fields': 'query',
                    'work_item_type': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_time_tracking_settings_work_item_types_work_item_type_id_post
        )

        def __admin_time_tracking_settings_work_time_settings_get(
            self,
            **kwargs
        ):
            """admin_time_tracking_settings_work_time_settings_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_time_tracking_settings_work_time_settings_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                fields (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                WorkTimeSettings
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.admin_time_tracking_settings_work_time_settings_get = _Endpoint(
            settings={
                'response_type': (WorkTimeSettings,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/timeTrackingSettings/workTimeSettings',
                'operation_id': 'admin_time_tracking_settings_work_time_settings_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'fields',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'fields':
                        (str,),
                },
                'attribute_map': {
                    'fields': 'fields',
                },
                'location_map': {
                    'fields': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__admin_time_tracking_settings_work_time_settings_get
        )

        def __admin_time_tracking_settings_work_time_settings_post(
            self,
            **kwargs
        ):
            """admin_time_tracking_settings_work_time_settings_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.admin_time_tracking_settings_work_time_settings_post(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                fields (str): [optional]
                work_time_settings (WorkTimeSettings): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                WorkTimeSettings
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.admin_time_tracking_settings_work_time_settings_post = _Endpoint(
            settings={
                'response_type': (WorkTimeSettings,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/admin/timeTrackingSettings/workTimeSettings',
                'operation_id': 'admin_time_tracking_settings_work_time_settings_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'fields',
                    'work_time_settings',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'fields':
                        (str,),
                    'work_time_settings':
                        (WorkTimeSettings,),
                },
                'attribute_map': {
                    'fields': 'fields',
                },
                'location_map': {
                    'fields': 'query',
                    'work_time_settings': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__admin_time_tracking_settings_work_time_settings_post
        )

        def __agiles_get(
            self,
            **kwargs
        ):
            """agiles_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.agiles_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                fields (str): [optional]
                skip (int): [optional]
                top (int): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Agile]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.agiles_get = _Endpoint(
            settings={
                'response_type': ([Agile],),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/agiles',
                'operation_id': 'agiles_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'fields',
                    'skip',
                    'top',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'fields':
                        (str,),
                    'skip':
                        (int,),
                    'top':
                        (int,),
                },
                'attribute_map': {
                    'fields': 'fields',
                    'skip': '$skip',
                    'top': '$top',
                },
                'location_map': {
                    'fields': 'query',
                    'skip': 'query',
                    'top': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__agiles_get
        )

        def __agiles_id_delete(
            self,
            id,
            **kwargs
        ):
            """agiles_id_delete  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.agiles_id_delete(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.agiles_id_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/agiles/{id}',
                'operation_id': 'agiles_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__agiles_id_delete
        )

        def __agiles_id_get(
            self,
            id,
            **kwargs
        ):
            """agiles_id_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.agiles_id_get(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Agile
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.agiles_id_get = _Endpoint(
            settings={
                'response_type': (Agile,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/agiles/{id}',
                'operation_id': 'agiles_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__agiles_id_get
        )

        def __agiles_id_post(
            self,
            id,
            **kwargs
        ):
            """agiles_id_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.agiles_id_post(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                agile (Agile): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Agile
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.agiles_id_post = _Endpoint(
            settings={
                'response_type': (Agile,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/agiles/{id}',
                'operation_id': 'agiles_id_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                    'agile',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                    'agile':
                        (Agile,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                    'agile': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__agiles_id_post
        )

        def __agiles_id_sprints_get(
            self,
            id,
            **kwargs
        ):
            """agiles_id_sprints_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.agiles_id_sprints_get(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                skip (int): [optional]
                top (int): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Sprint]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.agiles_id_sprints_get = _Endpoint(
            settings={
                'response_type': ([Sprint],),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/agiles/{id}/sprints',
                'operation_id': 'agiles_id_sprints_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                    'skip',
                    'top',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                    'skip':
                        (int,),
                    'top':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                    'skip': '$skip',
                    'top': '$top',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                    'skip': 'query',
                    'top': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__agiles_id_sprints_get
        )

        def __agiles_id_sprints_post(
            self,
            id,
            **kwargs
        ):
            """agiles_id_sprints_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.agiles_id_sprints_post(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                sprint (Sprint): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Sprint
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.agiles_id_sprints_post = _Endpoint(
            settings={
                'response_type': (Sprint,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/agiles/{id}/sprints',
                'operation_id': 'agiles_id_sprints_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                    'sprint',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                    'sprint':
                        (Sprint,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                    'sprint': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__agiles_id_sprints_post
        )

        def __agiles_id_sprints_sprint_id_delete(
            self,
            id,
            sprint_id,
            **kwargs
        ):
            """agiles_id_sprints_sprint_id_delete  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.agiles_id_sprints_sprint_id_delete(id, sprint_id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):
                sprint_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            kwargs['sprint_id'] = \
                sprint_id
            return self.call_with_http_info(**kwargs)

        self.agiles_id_sprints_sprint_id_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/agiles/{id}/sprints/{sprintId}',
                'operation_id': 'agiles_id_sprints_sprint_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'sprint_id',
                ],
                'required': [
                    'id',
                    'sprint_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'sprint_id':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'sprint_id': 'sprintId',
                },
                'location_map': {
                    'id': 'path',
                    'sprint_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__agiles_id_sprints_sprint_id_delete
        )

        def __agiles_id_sprints_sprint_id_get(
            self,
            id,
            sprint_id,
            **kwargs
        ):
            """agiles_id_sprints_sprint_id_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.agiles_id_sprints_sprint_id_get(id, sprint_id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):
                sprint_id (str):

            Keyword Args:
                fields (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Sprint
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            kwargs['sprint_id'] = \
                sprint_id
            return self.call_with_http_info(**kwargs)

        self.agiles_id_sprints_sprint_id_get = _Endpoint(
            settings={
                'response_type': (Sprint,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/agiles/{id}/sprints/{sprintId}',
                'operation_id': 'agiles_id_sprints_sprint_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'sprint_id',
                    'fields',
                ],
                'required': [
                    'id',
                    'sprint_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'sprint_id':
                        (str,),
                    'fields':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'sprint_id': 'sprintId',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'sprint_id': 'path',
                    'fields': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__agiles_id_sprints_sprint_id_get
        )

        def __agiles_id_sprints_sprint_id_post(
            self,
            id,
            sprint_id,
            **kwargs
        ):
            """agiles_id_sprints_sprint_id_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.agiles_id_sprints_sprint_id_post(id, sprint_id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):
                sprint_id (str):

            Keyword Args:
                fields (str): [optional]
                sprint (Sprint): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Sprint
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            kwargs['sprint_id'] = \
                sprint_id
            return self.call_with_http_info(**kwargs)

        self.agiles_id_sprints_sprint_id_post = _Endpoint(
            settings={
                'response_type': (Sprint,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/agiles/{id}/sprints/{sprintId}',
                'operation_id': 'agiles_id_sprints_sprint_id_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'sprint_id',
                    'fields',
                    'sprint',
                ],
                'required': [
                    'id',
                    'sprint_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'sprint_id':
                        (str,),
                    'fields':
                        (str,),
                    'sprint':
                        (Sprint,),
                },
                'attribute_map': {
                    'id': 'id',
                    'sprint_id': 'sprintId',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'sprint_id': 'path',
                    'fields': 'query',
                    'sprint': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__agiles_id_sprints_sprint_id_post
        )

        def __agiles_post(
            self,
            **kwargs
        ):
            """agiles_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.agiles_post(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                template (str): The name of the board template that should be used. Possible values: `kanban`, `scrum`, `version`, `custom`, `personal`.. [optional]
                fields (str): [optional]
                agile (Agile): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Agile
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.agiles_post = _Endpoint(
            settings={
                'response_type': (Agile,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/agiles',
                'operation_id': 'agiles_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'template',
                    'fields',
                    'agile',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'template':
                        (str,),
                    'fields':
                        (str,),
                    'agile':
                        (Agile,),
                },
                'attribute_map': {
                    'template': 'template',
                    'fields': 'fields',
                },
                'location_map': {
                    'template': 'query',
                    'fields': 'query',
                    'agile': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__agiles_post
        )

        def __commands_assist_get(
            self,
            **kwargs
        ):
            """commands_assist_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.commands_assist_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                fields (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                CommandList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.commands_assist_get = _Endpoint(
            settings={
                'response_type': (CommandList,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/commands/assist',
                'operation_id': 'commands_assist_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'fields',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'fields':
                        (str,),
                },
                'attribute_map': {
                    'fields': 'fields',
                },
                'location_map': {
                    'fields': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__commands_assist_get
        )

        def __commands_get(
            self,
            **kwargs
        ):
            """commands_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.commands_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                fields (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                CommandList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.commands_get = _Endpoint(
            settings={
                'response_type': (CommandList,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/commands',
                'operation_id': 'commands_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'fields',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'fields':
                        (str,),
                },
                'attribute_map': {
                    'fields': 'fields',
                },
                'location_map': {
                    'fields': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__commands_get
        )

        def __groups_get(
            self,
            **kwargs
        ):
            """groups_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.groups_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                fields (str): [optional]
                skip (int): [optional]
                top (int): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [UserGroup]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.groups_get = _Endpoint(
            settings={
                'response_type': ([UserGroup],),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/groups',
                'operation_id': 'groups_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'fields',
                    'skip',
                    'top',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'fields':
                        (str,),
                    'skip':
                        (int,),
                    'top':
                        (int,),
                },
                'attribute_map': {
                    'fields': 'fields',
                    'skip': '$skip',
                    'top': '$top',
                },
                'location_map': {
                    'fields': 'query',
                    'skip': 'query',
                    'top': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__groups_get
        )

        def __groups_id_get(
            self,
            id,
            **kwargs
        ):
            """groups_id_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.groups_id_get(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                UserGroup
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.groups_id_get = _Endpoint(
            settings={
                'response_type': (UserGroup,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/groups/{id}',
                'operation_id': 'groups_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__groups_id_get
        )

        def __issue_link_types_get(
            self,
            **kwargs
        ):
            """issue_link_types_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.issue_link_types_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                fields (str): [optional]
                skip (int): [optional]
                top (int): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [IssueLinkType]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.issue_link_types_get = _Endpoint(
            settings={
                'response_type': ([IssueLinkType],),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/issueLinkTypes',
                'operation_id': 'issue_link_types_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'fields',
                    'skip',
                    'top',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'fields':
                        (str,),
                    'skip':
                        (int,),
                    'top':
                        (int,),
                },
                'attribute_map': {
                    'fields': 'fields',
                    'skip': '$skip',
                    'top': '$top',
                },
                'location_map': {
                    'fields': 'query',
                    'skip': 'query',
                    'top': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__issue_link_types_get
        )

        def __issue_link_types_id_delete(
            self,
            id,
            **kwargs
        ):
            """issue_link_types_id_delete  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.issue_link_types_id_delete(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.issue_link_types_id_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/issueLinkTypes/{id}',
                'operation_id': 'issue_link_types_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__issue_link_types_id_delete
        )

        def __issue_link_types_id_get(
            self,
            id,
            **kwargs
        ):
            """issue_link_types_id_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.issue_link_types_id_get(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                IssueLinkType
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.issue_link_types_id_get = _Endpoint(
            settings={
                'response_type': (IssueLinkType,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/issueLinkTypes/{id}',
                'operation_id': 'issue_link_types_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__issue_link_types_id_get
        )

        def __issue_link_types_id_post(
            self,
            id,
            **kwargs
        ):
            """issue_link_types_id_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.issue_link_types_id_post(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                issue_link_type (IssueLinkType): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                IssueLinkType
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.issue_link_types_id_post = _Endpoint(
            settings={
                'response_type': (IssueLinkType,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/issueLinkTypes/{id}',
                'operation_id': 'issue_link_types_id_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                    'issue_link_type',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                    'issue_link_type':
                        (IssueLinkType,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                    'issue_link_type': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__issue_link_types_id_post
        )

        def __issue_link_types_post(
            self,
            **kwargs
        ):
            """issue_link_types_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.issue_link_types_post(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                fields (str): [optional]
                issue_link_type (IssueLinkType): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                IssueLinkType
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.issue_link_types_post = _Endpoint(
            settings={
                'response_type': (IssueLinkType,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/issueLinkTypes',
                'operation_id': 'issue_link_types_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'fields',
                    'issue_link_type',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'fields':
                        (str,),
                    'issue_link_type':
                        (IssueLinkType,),
                },
                'attribute_map': {
                    'fields': 'fields',
                },
                'location_map': {
                    'fields': 'query',
                    'issue_link_type': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__issue_link_types_post
        )

        def __issue_tags_get(
            self,
            **kwargs
        ):
            """issue_tags_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.issue_tags_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                fields (str): [optional]
                skip (int): [optional]
                top (int): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [IssueTag]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.issue_tags_get = _Endpoint(
            settings={
                'response_type': ([IssueTag],),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/issueTags',
                'operation_id': 'issue_tags_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'fields',
                    'skip',
                    'top',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'fields':
                        (str,),
                    'skip':
                        (int,),
                    'top':
                        (int,),
                },
                'attribute_map': {
                    'fields': 'fields',
                    'skip': '$skip',
                    'top': '$top',
                },
                'location_map': {
                    'fields': 'query',
                    'skip': 'query',
                    'top': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__issue_tags_get
        )

        def __issue_tags_id_delete(
            self,
            id,
            **kwargs
        ):
            """issue_tags_id_delete  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.issue_tags_id_delete(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.issue_tags_id_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/issueTags/{id}',
                'operation_id': 'issue_tags_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__issue_tags_id_delete
        )

        def __issue_tags_id_get(
            self,
            id,
            **kwargs
        ):
            """issue_tags_id_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.issue_tags_id_get(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                IssueTag
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.issue_tags_id_get = _Endpoint(
            settings={
                'response_type': (IssueTag,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/issueTags/{id}',
                'operation_id': 'issue_tags_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__issue_tags_id_get
        )

        def __issue_tags_id_issues_get(
            self,
            id,
            **kwargs
        ):
            """issue_tags_id_issues_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.issue_tags_id_issues_get(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                skip (int): [optional]
                top (int): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Issue]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.issue_tags_id_issues_get = _Endpoint(
            settings={
                'response_type': ([Issue],),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/issueTags/{id}/issues',
                'operation_id': 'issue_tags_id_issues_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                    'skip',
                    'top',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                    'skip':
                        (int,),
                    'top':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                    'skip': '$skip',
                    'top': '$top',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                    'skip': 'query',
                    'top': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__issue_tags_id_issues_get
        )

        def __issue_tags_id_post(
            self,
            id,
            **kwargs
        ):
            """issue_tags_id_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.issue_tags_id_post(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                issue_tag (IssueTag): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                IssueTag
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.issue_tags_id_post = _Endpoint(
            settings={
                'response_type': (IssueTag,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/issueTags/{id}',
                'operation_id': 'issue_tags_id_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                    'issue_tag',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                    'issue_tag':
                        (IssueTag,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                    'issue_tag': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__issue_tags_id_post
        )

        def __issue_tags_post(
            self,
            **kwargs
        ):
            """issue_tags_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.issue_tags_post(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                fields (str): [optional]
                issue_tag (IssueTag): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                IssueTag
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.issue_tags_post = _Endpoint(
            settings={
                'response_type': (IssueTag,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/issueTags',
                'operation_id': 'issue_tags_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'fields',
                    'issue_tag',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'fields':
                        (str,),
                    'issue_tag':
                        (IssueTag,),
                },
                'attribute_map': {
                    'fields': 'fields',
                },
                'location_map': {
                    'fields': 'query',
                    'issue_tag': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__issue_tags_post
        )

        def __issues_get(
            self,
            **kwargs
        ):
            """issues_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.issues_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                query (str): Issues search query. Read more about search syntax here: <a href=\"https://www.jetbrains.com/help/youtrack/incloud/?Search-and-Command-Attributes\">Search and Command Attributes</a>. [optional]
                fields (str): [optional]
                skip (int): [optional]
                top (int): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Issue]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.issues_get = _Endpoint(
            settings={
                'response_type': ([Issue],),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/issues',
                'operation_id': 'issues_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'query',
                    'fields',
                    'skip',
                    'top',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'query':
                        (str,),
                    'fields':
                        (str,),
                    'skip':
                        (int,),
                    'top':
                        (int,),
                },
                'attribute_map': {
                    'query': 'query',
                    'fields': 'fields',
                    'skip': '$skip',
                    'top': '$top',
                },
                'location_map': {
                    'query': 'query',
                    'fields': 'query',
                    'skip': 'query',
                    'top': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__issues_get
        )

        def __issues_id_activities_activity_item_id_get(
            self,
            id,
            activity_item_id,
            **kwargs
        ):
            """issues_id_activities_activity_item_id_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.issues_id_activities_activity_item_id_get(id, activity_item_id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):
                activity_item_id (str):

            Keyword Args:
                fields (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ActivityItem
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            kwargs['activity_item_id'] = \
                activity_item_id
            return self.call_with_http_info(**kwargs)

        self.issues_id_activities_activity_item_id_get = _Endpoint(
            settings={
                'response_type': (ActivityItem,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/issues/{id}/activities/{activityItemId}',
                'operation_id': 'issues_id_activities_activity_item_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'activity_item_id',
                    'fields',
                ],
                'required': [
                    'id',
                    'activity_item_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'activity_item_id':
                        (str,),
                    'fields':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'activity_item_id': 'activityItemId',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'activity_item_id': 'path',
                    'fields': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__issues_id_activities_activity_item_id_get
        )

        def __issues_id_activities_get(
            self,
            id,
            **kwargs
        ):
            """issues_id_activities_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.issues_id_activities_get(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                categories (str): [optional]
                reverse (bool): Indicates whether the order of returning activities is from newest to oldest or the opposite. If \"false\", then the oldest activity item that matches a selected filter is returned first. If \"true\", then the newest activity is returned first. By default, \"false\".. [optional]
                start (str): Start timestamp of the time interval the activity timestamp belongs to. If the parameter is not set, it is considered to be 0.. [optional]
                end (str): End timestamp of the time interval the activity timestamp belongs to. If the parameter is not set, it is considered as Long.MAX_VALUE.. [optional]
                author (str): Parameter to filter activities by the author. The database id or login, or Hub id, or 'me' for the current logged in user could be specified.. [optional]
                fields (str): [optional]
                skip (int): [optional]
                top (int): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [ActivityItem]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.issues_id_activities_get = _Endpoint(
            settings={
                'response_type': ([ActivityItem],),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/issues/{id}/activities',
                'operation_id': 'issues_id_activities_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'categories',
                    'reverse',
                    'start',
                    'end',
                    'author',
                    'fields',
                    'skip',
                    'top',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'categories':
                        (str,),
                    'reverse':
                        (bool,),
                    'start':
                        (str,),
                    'end':
                        (str,),
                    'author':
                        (str,),
                    'fields':
                        (str,),
                    'skip':
                        (int,),
                    'top':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                    'categories': 'categories',
                    'reverse': 'reverse',
                    'start': 'start',
                    'end': 'end',
                    'author': 'author',
                    'fields': 'fields',
                    'skip': '$skip',
                    'top': '$top',
                },
                'location_map': {
                    'id': 'path',
                    'categories': 'query',
                    'reverse': 'query',
                    'start': 'query',
                    'end': 'query',
                    'author': 'query',
                    'fields': 'query',
                    'skip': 'query',
                    'top': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__issues_id_activities_get
        )

        def __issues_id_activities_page_get(
            self,
            id,
            **kwargs
        ):
            """issues_id_activities_page_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.issues_id_activities_page_get(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                categories (str): [optional]
                reverse (bool): Indicates whether the order of returning activities is from newest to oldest or the opposite. If \"false\", then the oldest activity item that matches a selected filter is returned first. If \"true\", then the newest activity is returned first. By default, \"false\".. [optional]
                start (str): Start timestamp of the time interval the activity timestamp belongs to. If the parameter is not set, it is considered to be 0.. [optional]
                end (str): End timestamp of the time interval the activity timestamp belongs to. If the parameter is not set, it is considered as Long.MAX_VALUE.. [optional]
                author (str): Parameter to filter activities by the author. The database id or login, or Hub id, or 'me' for the current logged in user could be specified.. [optional]
                cursor (str): [optional]
                activity_id (str): ID of the activity that should be included in the page. The activity is allocated to the middle of the page.. [optional]
                fields (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ActivityCursorPage
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.issues_id_activities_page_get = _Endpoint(
            settings={
                'response_type': (ActivityCursorPage,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/issues/{id}/activitiesPage',
                'operation_id': 'issues_id_activities_page_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'categories',
                    'reverse',
                    'start',
                    'end',
                    'author',
                    'cursor',
                    'activity_id',
                    'fields',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'categories':
                        (str,),
                    'reverse':
                        (bool,),
                    'start':
                        (str,),
                    'end':
                        (str,),
                    'author':
                        (str,),
                    'cursor':
                        (str,),
                    'activity_id':
                        (str,),
                    'fields':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'categories': 'categories',
                    'reverse': 'reverse',
                    'start': 'start',
                    'end': 'end',
                    'author': 'author',
                    'cursor': 'cursor',
                    'activity_id': 'activityId',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'categories': 'query',
                    'reverse': 'query',
                    'start': 'query',
                    'end': 'query',
                    'author': 'query',
                    'cursor': 'query',
                    'activity_id': 'query',
                    'fields': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__issues_id_activities_page_get
        )

        def __issues_id_attachments_get(
            self,
            id,
            **kwargs
        ):
            """issues_id_attachments_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.issues_id_attachments_get(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                skip (int): [optional]
                top (int): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [IssueAttachment]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.issues_id_attachments_get = _Endpoint(
            settings={
                'response_type': ([IssueAttachment],),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/issues/{id}/attachments',
                'operation_id': 'issues_id_attachments_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                    'skip',
                    'top',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                    'skip':
                        (int,),
                    'top':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                    'skip': '$skip',
                    'top': '$top',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                    'skip': 'query',
                    'top': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__issues_id_attachments_get
        )

        def __issues_id_attachments_issue_attachment_id_delete(
            self,
            id,
            issue_attachment_id,
            **kwargs
        ):
            """issues_id_attachments_issue_attachment_id_delete  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.issues_id_attachments_issue_attachment_id_delete(id, issue_attachment_id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):
                issue_attachment_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            kwargs['issue_attachment_id'] = \
                issue_attachment_id
            return self.call_with_http_info(**kwargs)

        self.issues_id_attachments_issue_attachment_id_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/issues/{id}/attachments/{issueAttachmentId}',
                'operation_id': 'issues_id_attachments_issue_attachment_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'issue_attachment_id',
                ],
                'required': [
                    'id',
                    'issue_attachment_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'issue_attachment_id':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'issue_attachment_id': 'issueAttachmentId',
                },
                'location_map': {
                    'id': 'path',
                    'issue_attachment_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__issues_id_attachments_issue_attachment_id_delete
        )

        def __issues_id_attachments_issue_attachment_id_get(
            self,
            id,
            issue_attachment_id,
            **kwargs
        ):
            """issues_id_attachments_issue_attachment_id_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.issues_id_attachments_issue_attachment_id_get(id, issue_attachment_id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):
                issue_attachment_id (str):

            Keyword Args:
                fields (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                IssueAttachment
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            kwargs['issue_attachment_id'] = \
                issue_attachment_id
            return self.call_with_http_info(**kwargs)

        self.issues_id_attachments_issue_attachment_id_get = _Endpoint(
            settings={
                'response_type': (IssueAttachment,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/issues/{id}/attachments/{issueAttachmentId}',
                'operation_id': 'issues_id_attachments_issue_attachment_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'issue_attachment_id',
                    'fields',
                ],
                'required': [
                    'id',
                    'issue_attachment_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'issue_attachment_id':
                        (str,),
                    'fields':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'issue_attachment_id': 'issueAttachmentId',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'issue_attachment_id': 'path',
                    'fields': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__issues_id_attachments_issue_attachment_id_get
        )

        def __issues_id_attachments_issue_attachment_id_post(
            self,
            id,
            issue_attachment_id,
            **kwargs
        ):
            """issues_id_attachments_issue_attachment_id_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.issues_id_attachments_issue_attachment_id_post(id, issue_attachment_id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):
                issue_attachment_id (str):

            Keyword Args:
                fields (str): [optional]
                issue_attachment (IssueAttachment): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                IssueAttachment
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            kwargs['issue_attachment_id'] = \
                issue_attachment_id
            return self.call_with_http_info(**kwargs)

        self.issues_id_attachments_issue_attachment_id_post = _Endpoint(
            settings={
                'response_type': (IssueAttachment,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/issues/{id}/attachments/{issueAttachmentId}',
                'operation_id': 'issues_id_attachments_issue_attachment_id_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'issue_attachment_id',
                    'fields',
                    'issue_attachment',
                ],
                'required': [
                    'id',
                    'issue_attachment_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'issue_attachment_id':
                        (str,),
                    'fields':
                        (str,),
                    'issue_attachment':
                        (IssueAttachment,),
                },
                'attribute_map': {
                    'id': 'id',
                    'issue_attachment_id': 'issueAttachmentId',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'issue_attachment_id': 'path',
                    'fields': 'query',
                    'issue_attachment': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__issues_id_attachments_issue_attachment_id_post
        )

        def __issues_id_attachments_post(
            self,
            id,
            **kwargs
        ):
            """issues_id_attachments_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.issues_id_attachments_post(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                issue_attachment (IssueAttachment): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                IssueAttachment
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.issues_id_attachments_post = _Endpoint(
            settings={
                'response_type': (IssueAttachment,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/issues/{id}/attachments',
                'operation_id': 'issues_id_attachments_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                    'issue_attachment',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                    'issue_attachment':
                        (IssueAttachment,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                    'issue_attachment': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__issues_id_attachments_post
        )

        def __issues_id_comments_get(
            self,
            id,
            **kwargs
        ):
            """issues_id_comments_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.issues_id_comments_get(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                skip (int): [optional]
                top (int): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [IssueComment]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.issues_id_comments_get = _Endpoint(
            settings={
                'response_type': ([IssueComment],),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/issues/{id}/comments',
                'operation_id': 'issues_id_comments_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                    'skip',
                    'top',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                    'skip':
                        (int,),
                    'top':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                    'skip': '$skip',
                    'top': '$top',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                    'skip': 'query',
                    'top': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__issues_id_comments_get
        )

        def __issues_id_comments_issue_comment_id_delete(
            self,
            id,
            issue_comment_id,
            **kwargs
        ):
            """issues_id_comments_issue_comment_id_delete  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.issues_id_comments_issue_comment_id_delete(id, issue_comment_id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):
                issue_comment_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            kwargs['issue_comment_id'] = \
                issue_comment_id
            return self.call_with_http_info(**kwargs)

        self.issues_id_comments_issue_comment_id_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/issues/{id}/comments/{issueCommentId}',
                'operation_id': 'issues_id_comments_issue_comment_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'issue_comment_id',
                ],
                'required': [
                    'id',
                    'issue_comment_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'issue_comment_id':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'issue_comment_id': 'issueCommentId',
                },
                'location_map': {
                    'id': 'path',
                    'issue_comment_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__issues_id_comments_issue_comment_id_delete
        )

        def __issues_id_comments_issue_comment_id_get(
            self,
            id,
            issue_comment_id,
            **kwargs
        ):
            """issues_id_comments_issue_comment_id_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.issues_id_comments_issue_comment_id_get(id, issue_comment_id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):
                issue_comment_id (str):

            Keyword Args:
                fields (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                IssueComment
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            kwargs['issue_comment_id'] = \
                issue_comment_id
            return self.call_with_http_info(**kwargs)

        self.issues_id_comments_issue_comment_id_get = _Endpoint(
            settings={
                'response_type': (IssueComment,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/issues/{id}/comments/{issueCommentId}',
                'operation_id': 'issues_id_comments_issue_comment_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'issue_comment_id',
                    'fields',
                ],
                'required': [
                    'id',
                    'issue_comment_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'issue_comment_id':
                        (str,),
                    'fields':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'issue_comment_id': 'issueCommentId',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'issue_comment_id': 'path',
                    'fields': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__issues_id_comments_issue_comment_id_get
        )

        def __issues_id_comments_issue_comment_id_post(
            self,
            id,
            issue_comment_id,
            **kwargs
        ):
            """issues_id_comments_issue_comment_id_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.issues_id_comments_issue_comment_id_post(id, issue_comment_id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):
                issue_comment_id (str):

            Keyword Args:
                fields (str): [optional]
                issue_comment (IssueComment): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                IssueComment
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            kwargs['issue_comment_id'] = \
                issue_comment_id
            return self.call_with_http_info(**kwargs)

        self.issues_id_comments_issue_comment_id_post = _Endpoint(
            settings={
                'response_type': (IssueComment,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/issues/{id}/comments/{issueCommentId}',
                'operation_id': 'issues_id_comments_issue_comment_id_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'issue_comment_id',
                    'fields',
                    'issue_comment',
                ],
                'required': [
                    'id',
                    'issue_comment_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'issue_comment_id':
                        (str,),
                    'fields':
                        (str,),
                    'issue_comment':
                        (IssueComment,),
                },
                'attribute_map': {
                    'id': 'id',
                    'issue_comment_id': 'issueCommentId',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'issue_comment_id': 'path',
                    'fields': 'query',
                    'issue_comment': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__issues_id_comments_issue_comment_id_post
        )

        def __issues_id_comments_post(
            self,
            id,
            **kwargs
        ):
            """issues_id_comments_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.issues_id_comments_post(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                draft_id (str): ID of an existing draft that should be published. This parameter is optional.. [optional]
                fields (str): [optional]
                issue_comment (IssueComment): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                IssueComment
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.issues_id_comments_post = _Endpoint(
            settings={
                'response_type': (IssueComment,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/issues/{id}/comments',
                'operation_id': 'issues_id_comments_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'draft_id',
                    'fields',
                    'issue_comment',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'draft_id':
                        (str,),
                    'fields':
                        (str,),
                    'issue_comment':
                        (IssueComment,),
                },
                'attribute_map': {
                    'id': 'id',
                    'draft_id': 'draftId',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'draft_id': 'query',
                    'fields': 'query',
                    'issue_comment': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__issues_id_comments_post
        )

        def __issues_id_custom_fields_get(
            self,
            id,
            **kwargs
        ):
            """issues_id_custom_fields_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.issues_id_custom_fields_get(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                skip (int): [optional]
                top (int): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [IssueCustomField]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.issues_id_custom_fields_get = _Endpoint(
            settings={
                'response_type': ([IssueCustomField],),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/issues/{id}/customFields',
                'operation_id': 'issues_id_custom_fields_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                    'skip',
                    'top',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                    'skip':
                        (int,),
                    'top':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                    'skip': '$skip',
                    'top': '$top',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                    'skip': 'query',
                    'top': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__issues_id_custom_fields_get
        )

        def __issues_id_custom_fields_issue_custom_field_id_get(
            self,
            id,
            issue_custom_field_id,
            **kwargs
        ):
            """issues_id_custom_fields_issue_custom_field_id_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.issues_id_custom_fields_issue_custom_field_id_get(id, issue_custom_field_id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):
                issue_custom_field_id (str):

            Keyword Args:
                fields (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                IssueCustomField
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            kwargs['issue_custom_field_id'] = \
                issue_custom_field_id
            return self.call_with_http_info(**kwargs)

        self.issues_id_custom_fields_issue_custom_field_id_get = _Endpoint(
            settings={
                'response_type': (IssueCustomField,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/issues/{id}/customFields/{issueCustomFieldId}',
                'operation_id': 'issues_id_custom_fields_issue_custom_field_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'issue_custom_field_id',
                    'fields',
                ],
                'required': [
                    'id',
                    'issue_custom_field_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'issue_custom_field_id':
                        (str,),
                    'fields':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'issue_custom_field_id': 'issueCustomFieldId',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'issue_custom_field_id': 'path',
                    'fields': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__issues_id_custom_fields_issue_custom_field_id_get
        )

        def __issues_id_custom_fields_issue_custom_field_id_post(
            self,
            id,
            issue_custom_field_id,
            **kwargs
        ):
            """issues_id_custom_fields_issue_custom_field_id_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.issues_id_custom_fields_issue_custom_field_id_post(id, issue_custom_field_id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):
                issue_custom_field_id (str):

            Keyword Args:
                fields (str): [optional]
                issue_custom_field (IssueCustomField): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                IssueCustomField
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            kwargs['issue_custom_field_id'] = \
                issue_custom_field_id
            return self.call_with_http_info(**kwargs)

        self.issues_id_custom_fields_issue_custom_field_id_post = _Endpoint(
            settings={
                'response_type': (IssueCustomField,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/issues/{id}/customFields/{issueCustomFieldId}',
                'operation_id': 'issues_id_custom_fields_issue_custom_field_id_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'issue_custom_field_id',
                    'fields',
                    'issue_custom_field',
                ],
                'required': [
                    'id',
                    'issue_custom_field_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'issue_custom_field_id':
                        (str,),
                    'fields':
                        (str,),
                    'issue_custom_field':
                        (IssueCustomField,),
                },
                'attribute_map': {
                    'id': 'id',
                    'issue_custom_field_id': 'issueCustomFieldId',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'issue_custom_field_id': 'path',
                    'fields': 'query',
                    'issue_custom_field': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__issues_id_custom_fields_issue_custom_field_id_post
        )

        def __issues_id_delete(
            self,
            id,
            **kwargs
        ):
            """issues_id_delete  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.issues_id_delete(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.issues_id_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/issues/{id}',
                'operation_id': 'issues_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__issues_id_delete
        )

        def __issues_id_get(
            self,
            id,
            **kwargs
        ):
            """issues_id_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.issues_id_get(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Issue
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.issues_id_get = _Endpoint(
            settings={
                'response_type': (Issue,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/issues/{id}',
                'operation_id': 'issues_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__issues_id_get
        )

        def __issues_id_links_get(
            self,
            id,
            **kwargs
        ):
            """issues_id_links_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.issues_id_links_get(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                skip (int): [optional]
                top (int): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [IssueLink]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.issues_id_links_get = _Endpoint(
            settings={
                'response_type': ([IssueLink],),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/issues/{id}/links',
                'operation_id': 'issues_id_links_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                    'skip',
                    'top',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                    'skip':
                        (int,),
                    'top':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                    'skip': '$skip',
                    'top': '$top',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                    'skip': 'query',
                    'top': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__issues_id_links_get
        )

        def __issues_id_links_issue_link_id_get(
            self,
            id,
            issue_link_id,
            **kwargs
        ):
            """issues_id_links_issue_link_id_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.issues_id_links_issue_link_id_get(id, issue_link_id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):
                issue_link_id (str):

            Keyword Args:
                fields (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                IssueLink
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            kwargs['issue_link_id'] = \
                issue_link_id
            return self.call_with_http_info(**kwargs)

        self.issues_id_links_issue_link_id_get = _Endpoint(
            settings={
                'response_type': (IssueLink,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/issues/{id}/links/{issueLinkId}',
                'operation_id': 'issues_id_links_issue_link_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'issue_link_id',
                    'fields',
                ],
                'required': [
                    'id',
                    'issue_link_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'issue_link_id':
                        (str,),
                    'fields':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'issue_link_id': 'issueLinkId',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'issue_link_id': 'path',
                    'fields': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__issues_id_links_issue_link_id_get
        )

        def __issues_id_links_issue_link_id_issues_get(
            self,
            id,
            issue_link_id,
            **kwargs
        ):
            """issues_id_links_issue_link_id_issues_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.issues_id_links_issue_link_id_issues_get(id, issue_link_id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):
                issue_link_id (str):

            Keyword Args:
                fields (str): [optional]
                skip (int): [optional]
                top (int): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Issue]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            kwargs['issue_link_id'] = \
                issue_link_id
            return self.call_with_http_info(**kwargs)

        self.issues_id_links_issue_link_id_issues_get = _Endpoint(
            settings={
                'response_type': ([Issue],),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/issues/{id}/links/{issueLinkId}/issues',
                'operation_id': 'issues_id_links_issue_link_id_issues_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'issue_link_id',
                    'fields',
                    'skip',
                    'top',
                ],
                'required': [
                    'id',
                    'issue_link_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'issue_link_id':
                        (str,),
                    'fields':
                        (str,),
                    'skip':
                        (int,),
                    'top':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                    'issue_link_id': 'issueLinkId',
                    'fields': 'fields',
                    'skip': '$skip',
                    'top': '$top',
                },
                'location_map': {
                    'id': 'path',
                    'issue_link_id': 'path',
                    'fields': 'query',
                    'skip': 'query',
                    'top': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__issues_id_links_issue_link_id_issues_get
        )

        def __issues_id_links_issue_link_id_issues_issue_id_delete(
            self,
            id,
            issue_link_id,
            issue_id,
            **kwargs
        ):
            """issues_id_links_issue_link_id_issues_issue_id_delete  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.issues_id_links_issue_link_id_issues_issue_id_delete(id, issue_link_id, issue_id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):
                issue_link_id (str):
                issue_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            kwargs['issue_link_id'] = \
                issue_link_id
            kwargs['issue_id'] = \
                issue_id
            return self.call_with_http_info(**kwargs)

        self.issues_id_links_issue_link_id_issues_issue_id_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/issues/{id}/links/{issueLinkId}/issues/{issueId}',
                'operation_id': 'issues_id_links_issue_link_id_issues_issue_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'issue_link_id',
                    'issue_id',
                ],
                'required': [
                    'id',
                    'issue_link_id',
                    'issue_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'issue_link_id':
                        (str,),
                    'issue_id':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'issue_link_id': 'issueLinkId',
                    'issue_id': 'issueId',
                },
                'location_map': {
                    'id': 'path',
                    'issue_link_id': 'path',
                    'issue_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__issues_id_links_issue_link_id_issues_issue_id_delete
        )

        def __issues_id_links_issue_link_id_issues_post(
            self,
            id,
            issue_link_id,
            **kwargs
        ):
            """issues_id_links_issue_link_id_issues_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.issues_id_links_issue_link_id_issues_post(id, issue_link_id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):
                issue_link_id (str):

            Keyword Args:
                fields (str): [optional]
                issue (Issue): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Issue
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            kwargs['issue_link_id'] = \
                issue_link_id
            return self.call_with_http_info(**kwargs)

        self.issues_id_links_issue_link_id_issues_post = _Endpoint(
            settings={
                'response_type': (Issue,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/issues/{id}/links/{issueLinkId}/issues',
                'operation_id': 'issues_id_links_issue_link_id_issues_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'issue_link_id',
                    'fields',
                    'issue',
                ],
                'required': [
                    'id',
                    'issue_link_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'issue_link_id':
                        (str,),
                    'fields':
                        (str,),
                    'issue':
                        (Issue,),
                },
                'attribute_map': {
                    'id': 'id',
                    'issue_link_id': 'issueLinkId',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'issue_link_id': 'path',
                    'fields': 'query',
                    'issue': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__issues_id_links_issue_link_id_issues_post
        )

        def __issues_id_post(
            self,
            id,
            **kwargs
        ):
            """issues_id_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.issues_id_post(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                issue (Issue): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Issue
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.issues_id_post = _Endpoint(
            settings={
                'response_type': (Issue,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/issues/{id}',
                'operation_id': 'issues_id_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                    'issue',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                    'issue':
                        (Issue,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                    'issue': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__issues_id_post
        )

        def __issues_id_project_get(
            self,
            id,
            **kwargs
        ):
            """issues_id_project_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.issues_id_project_get(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Project
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.issues_id_project_get = _Endpoint(
            settings={
                'response_type': (Project,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/issues/{id}/project',
                'operation_id': 'issues_id_project_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__issues_id_project_get
        )

        def __issues_id_project_post(
            self,
            id,
            **kwargs
        ):
            """issues_id_project_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.issues_id_project_post(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                project (Project): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Project
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.issues_id_project_post = _Endpoint(
            settings={
                'response_type': (Project,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/issues/{id}/project',
                'operation_id': 'issues_id_project_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                    'project',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                    'project':
                        (Project,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                    'project': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__issues_id_project_post
        )

        def __issues_id_time_tracking_get(
            self,
            id,
            **kwargs
        ):
            """issues_id_time_tracking_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.issues_id_time_tracking_get(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                IssueTimeTracker
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.issues_id_time_tracking_get = _Endpoint(
            settings={
                'response_type': (IssueTimeTracker,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/issues/{id}/timeTracking',
                'operation_id': 'issues_id_time_tracking_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__issues_id_time_tracking_get
        )

        def __issues_id_time_tracking_work_items_get(
            self,
            id,
            **kwargs
        ):
            """issues_id_time_tracking_work_items_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.issues_id_time_tracking_work_items_get(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                skip (int): [optional]
                top (int): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [IssueWorkItem]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.issues_id_time_tracking_work_items_get = _Endpoint(
            settings={
                'response_type': ([IssueWorkItem],),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/issues/{id}/timeTracking/workItems',
                'operation_id': 'issues_id_time_tracking_work_items_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                    'skip',
                    'top',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                    'skip':
                        (int,),
                    'top':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                    'skip': '$skip',
                    'top': '$top',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                    'skip': 'query',
                    'top': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__issues_id_time_tracking_work_items_get
        )

        def __issues_id_time_tracking_work_items_issue_work_item_id_delete(
            self,
            id,
            issue_work_item_id,
            **kwargs
        ):
            """issues_id_time_tracking_work_items_issue_work_item_id_delete  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.issues_id_time_tracking_work_items_issue_work_item_id_delete(id, issue_work_item_id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):
                issue_work_item_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            kwargs['issue_work_item_id'] = \
                issue_work_item_id
            return self.call_with_http_info(**kwargs)

        self.issues_id_time_tracking_work_items_issue_work_item_id_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/issues/{id}/timeTracking/workItems/{issueWorkItemId}',
                'operation_id': 'issues_id_time_tracking_work_items_issue_work_item_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'issue_work_item_id',
                ],
                'required': [
                    'id',
                    'issue_work_item_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'issue_work_item_id':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'issue_work_item_id': 'issueWorkItemId',
                },
                'location_map': {
                    'id': 'path',
                    'issue_work_item_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__issues_id_time_tracking_work_items_issue_work_item_id_delete
        )

        def __issues_id_time_tracking_work_items_issue_work_item_id_get(
            self,
            id,
            issue_work_item_id,
            **kwargs
        ):
            """issues_id_time_tracking_work_items_issue_work_item_id_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.issues_id_time_tracking_work_items_issue_work_item_id_get(id, issue_work_item_id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):
                issue_work_item_id (str):

            Keyword Args:
                fields (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                IssueWorkItem
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            kwargs['issue_work_item_id'] = \
                issue_work_item_id
            return self.call_with_http_info(**kwargs)

        self.issues_id_time_tracking_work_items_issue_work_item_id_get = _Endpoint(
            settings={
                'response_type': (IssueWorkItem,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/issues/{id}/timeTracking/workItems/{issueWorkItemId}',
                'operation_id': 'issues_id_time_tracking_work_items_issue_work_item_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'issue_work_item_id',
                    'fields',
                ],
                'required': [
                    'id',
                    'issue_work_item_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'issue_work_item_id':
                        (str,),
                    'fields':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'issue_work_item_id': 'issueWorkItemId',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'issue_work_item_id': 'path',
                    'fields': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__issues_id_time_tracking_work_items_issue_work_item_id_get
        )

        def __issues_id_time_tracking_work_items_issue_work_item_id_post(
            self,
            id,
            issue_work_item_id,
            **kwargs
        ):
            """issues_id_time_tracking_work_items_issue_work_item_id_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.issues_id_time_tracking_work_items_issue_work_item_id_post(id, issue_work_item_id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):
                issue_work_item_id (str):

            Keyword Args:
                fields (str): [optional]
                issue_work_item (IssueWorkItem): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                IssueWorkItem
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            kwargs['issue_work_item_id'] = \
                issue_work_item_id
            return self.call_with_http_info(**kwargs)

        self.issues_id_time_tracking_work_items_issue_work_item_id_post = _Endpoint(
            settings={
                'response_type': (IssueWorkItem,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/issues/{id}/timeTracking/workItems/{issueWorkItemId}',
                'operation_id': 'issues_id_time_tracking_work_items_issue_work_item_id_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'issue_work_item_id',
                    'fields',
                    'issue_work_item',
                ],
                'required': [
                    'id',
                    'issue_work_item_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'issue_work_item_id':
                        (str,),
                    'fields':
                        (str,),
                    'issue_work_item':
                        (IssueWorkItem,),
                },
                'attribute_map': {
                    'id': 'id',
                    'issue_work_item_id': 'issueWorkItemId',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'issue_work_item_id': 'path',
                    'fields': 'query',
                    'issue_work_item': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__issues_id_time_tracking_work_items_issue_work_item_id_post
        )

        def __issues_id_time_tracking_work_items_post(
            self,
            id,
            **kwargs
        ):
            """issues_id_time_tracking_work_items_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.issues_id_time_tracking_work_items_post(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                issue_work_item (IssueWorkItem): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                IssueWorkItem
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.issues_id_time_tracking_work_items_post = _Endpoint(
            settings={
                'response_type': (IssueWorkItem,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/issues/{id}/timeTracking/workItems',
                'operation_id': 'issues_id_time_tracking_work_items_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                    'issue_work_item',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                    'issue_work_item':
                        (IssueWorkItem,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                    'issue_work_item': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__issues_id_time_tracking_work_items_post
        )

        def __issues_post(
            self,
            **kwargs
        ):
            """issues_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.issues_post(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                draft_id (str): ID of a draft to report as the new issue. If no `draftId` is provided, the issue is created from scratch.In this case, you must specify the project in the request payload.. [optional]
                fields (str): [optional]
                issue (Issue): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Issue
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.issues_post = _Endpoint(
            settings={
                'response_type': (Issue,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/issues',
                'operation_id': 'issues_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'draft_id',
                    'fields',
                    'issue',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'draft_id':
                        (str,),
                    'fields':
                        (str,),
                    'issue':
                        (Issue,),
                },
                'attribute_map': {
                    'draft_id': 'draftId',
                    'fields': 'fields',
                },
                'location_map': {
                    'draft_id': 'query',
                    'fields': 'query',
                    'issue': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__issues_post
        )

        def __saved_queries_get(
            self,
            **kwargs
        ):
            """saved_queries_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.saved_queries_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                fields (str): [optional]
                skip (int): [optional]
                top (int): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [SavedQuery]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.saved_queries_get = _Endpoint(
            settings={
                'response_type': ([SavedQuery],),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/savedQueries',
                'operation_id': 'saved_queries_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'fields',
                    'skip',
                    'top',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'fields':
                        (str,),
                    'skip':
                        (int,),
                    'top':
                        (int,),
                },
                'attribute_map': {
                    'fields': 'fields',
                    'skip': '$skip',
                    'top': '$top',
                },
                'location_map': {
                    'fields': 'query',
                    'skip': 'query',
                    'top': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__saved_queries_get
        )

        def __saved_queries_id_delete(
            self,
            id,
            **kwargs
        ):
            """saved_queries_id_delete  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.saved_queries_id_delete(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.saved_queries_id_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/savedQueries/{id}',
                'operation_id': 'saved_queries_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__saved_queries_id_delete
        )

        def __saved_queries_id_get(
            self,
            id,
            **kwargs
        ):
            """saved_queries_id_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.saved_queries_id_get(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                SavedQuery
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.saved_queries_id_get = _Endpoint(
            settings={
                'response_type': (SavedQuery,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/savedQueries/{id}',
                'operation_id': 'saved_queries_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__saved_queries_id_get
        )

        def __saved_queries_id_post(
            self,
            id,
            **kwargs
        ):
            """saved_queries_id_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.saved_queries_id_post(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                saved_query (SavedQuery): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                SavedQuery
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.saved_queries_id_post = _Endpoint(
            settings={
                'response_type': (SavedQuery,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/savedQueries/{id}',
                'operation_id': 'saved_queries_id_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                    'saved_query',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                    'saved_query':
                        (SavedQuery,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                    'saved_query': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__saved_queries_id_post
        )

        def __saved_queries_post(
            self,
            **kwargs
        ):
            """saved_queries_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.saved_queries_post(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                fields (str): [optional]
                saved_query (SavedQuery): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                SavedQuery
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.saved_queries_post = _Endpoint(
            settings={
                'response_type': (SavedQuery,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/savedQueries',
                'operation_id': 'saved_queries_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'fields',
                    'saved_query',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'fields':
                        (str,),
                    'saved_query':
                        (SavedQuery,),
                },
                'attribute_map': {
                    'fields': 'fields',
                },
                'location_map': {
                    'fields': 'query',
                    'saved_query': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__saved_queries_post
        )

        def __search_assist_get(
            self,
            **kwargs
        ):
            """search_assist_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.search_assist_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                fields (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                SearchSuggestions
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.search_assist_get = _Endpoint(
            settings={
                'response_type': (SearchSuggestions,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/search/assist',
                'operation_id': 'search_assist_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'fields',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'fields':
                        (str,),
                },
                'attribute_map': {
                    'fields': 'fields',
                },
                'location_map': {
                    'fields': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__search_assist_get
        )

        def __users_get(
            self,
            **kwargs
        ):
            """users_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.users_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                fields (str): [optional]
                skip (int): [optional]
                top (int): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [User]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.users_get = _Endpoint(
            settings={
                'response_type': ([User],),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/users',
                'operation_id': 'users_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'fields',
                    'skip',
                    'top',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'fields':
                        (str,),
                    'skip':
                        (int,),
                    'top':
                        (int,),
                },
                'attribute_map': {
                    'fields': 'fields',
                    'skip': '$skip',
                    'top': '$top',
                },
                'location_map': {
                    'fields': 'query',
                    'skip': 'query',
                    'top': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__users_get
        )

        def __users_id_get(
            self,
            id,
            **kwargs
        ):
            """users_id_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.users_id_get(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                User
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.users_id_get = _Endpoint(
            settings={
                'response_type': (User,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/users/{id}',
                'operation_id': 'users_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__users_id_get
        )

        def __users_id_profiles_general_get(
            self,
            id,
            **kwargs
        ):
            """users_id_profiles_general_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.users_id_profiles_general_get(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                GeneralUserProfile
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.users_id_profiles_general_get = _Endpoint(
            settings={
                'response_type': (GeneralUserProfile,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/users/{id}/profiles/general',
                'operation_id': 'users_id_profiles_general_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__users_id_profiles_general_get
        )

        def __users_id_profiles_general_post(
            self,
            id,
            **kwargs
        ):
            """users_id_profiles_general_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.users_id_profiles_general_post(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                general_user_profile (GeneralUserProfile): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                GeneralUserProfile
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.users_id_profiles_general_post = _Endpoint(
            settings={
                'response_type': (GeneralUserProfile,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/users/{id}/profiles/general',
                'operation_id': 'users_id_profiles_general_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                    'general_user_profile',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                    'general_user_profile':
                        (GeneralUserProfile,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                    'general_user_profile': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__users_id_profiles_general_post
        )

        def __users_id_profiles_notifications_get(
            self,
            id,
            **kwargs
        ):
            """users_id_profiles_notifications_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.users_id_profiles_notifications_get(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                NotificationsUserProfile
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.users_id_profiles_notifications_get = _Endpoint(
            settings={
                'response_type': (NotificationsUserProfile,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/users/{id}/profiles/notifications',
                'operation_id': 'users_id_profiles_notifications_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__users_id_profiles_notifications_get
        )

        def __users_id_profiles_notifications_post(
            self,
            id,
            **kwargs
        ):
            """users_id_profiles_notifications_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.users_id_profiles_notifications_post(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                notifications_user_profile (NotificationsUserProfile): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                NotificationsUserProfile
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.users_id_profiles_notifications_post = _Endpoint(
            settings={
                'response_type': (NotificationsUserProfile,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/users/{id}/profiles/notifications',
                'operation_id': 'users_id_profiles_notifications_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                    'notifications_user_profile',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                    'notifications_user_profile':
                        (NotificationsUserProfile,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                    'notifications_user_profile': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__users_id_profiles_notifications_post
        )

        def __users_id_profiles_timetracking_get(
            self,
            id,
            **kwargs
        ):
            """users_id_profiles_timetracking_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.users_id_profiles_timetracking_get(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                TimeTrackingUserProfile
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.users_id_profiles_timetracking_get = _Endpoint(
            settings={
                'response_type': (TimeTrackingUserProfile,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/users/{id}/profiles/timetracking',
                'operation_id': 'users_id_profiles_timetracking_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__users_id_profiles_timetracking_get
        )

        def __users_id_profiles_timetracking_post(
            self,
            id,
            **kwargs
        ):
            """users_id_profiles_timetracking_post  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.users_id_profiles_timetracking_post(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                time_tracking_user_profile (TimeTrackingUserProfile): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                TimeTrackingUserProfile
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.users_id_profiles_timetracking_post = _Endpoint(
            settings={
                'response_type': (TimeTrackingUserProfile,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/users/{id}/profiles/timetracking',
                'operation_id': 'users_id_profiles_timetracking_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                    'time_tracking_user_profile',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                    'time_tracking_user_profile':
                        (TimeTrackingUserProfile,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                    'time_tracking_user_profile': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__users_id_profiles_timetracking_post
        )

        def __users_id_saved_queries_get(
            self,
            id,
            **kwargs
        ):
            """users_id_saved_queries_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.users_id_saved_queries_get(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                skip (int): [optional]
                top (int): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [SavedQuery]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.users_id_saved_queries_get = _Endpoint(
            settings={
                'response_type': ([SavedQuery],),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/users/{id}/savedQueries',
                'operation_id': 'users_id_saved_queries_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                    'skip',
                    'top',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                    'skip':
                        (int,),
                    'top':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                    'skip': '$skip',
                    'top': '$top',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                    'skip': 'query',
                    'top': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__users_id_saved_queries_get
        )

        def __users_id_tags_get(
            self,
            id,
            **kwargs
        ):
            """users_id_tags_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.users_id_tags_get(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                skip (int): [optional]
                top (int): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [IssueTag]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.users_id_tags_get = _Endpoint(
            settings={
                'response_type': ([IssueTag],),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/users/{id}/tags',
                'operation_id': 'users_id_tags_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                    'skip',
                    'top',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                    'skip':
                        (int,),
                    'top':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                    'skip': '$skip',
                    'top': '$top',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                    'skip': 'query',
                    'top': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__users_id_tags_get
        )

        def __users_me_get(
            self,
            **kwargs
        ):
            """users_me_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.users_me_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                fields (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Me
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.users_me_get = _Endpoint(
            settings={
                'response_type': (Me,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/users/me',
                'operation_id': 'users_me_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'fields',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'fields':
                        (str,),
                },
                'attribute_map': {
                    'fields': 'fields',
                },
                'location_map': {
                    'fields': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__users_me_get
        )

        def __work_items_get(
            self,
            **kwargs
        ):
            """work_items_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.work_items_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                query (str): Issues search query. Read more about search syntax here: @@Search-and-Command-Attributes. [optional]
                start_date (date): The start date of the interval for work items date.. [optional]
                end_date (date): The end date of the interval for work items date.. [optional]
                start (int): The start timestamp of the interval for work items date.. [optional]
                end (int): The end timestamp of the interval for work items date.. [optional]
                created_start (int): The start timestamp of the interval for work items created date.. [optional]
                created_end (int): The end timestamp of the interval for work items created date.. [optional]
                updated_start (int): The start timestamp of the interval for work items updated date.. [optional]
                updated_end (int): The end timestamp of the interval for work items updated date.. [optional]
                author (str): Parameter to filter work items by there author. Could specify few values of database id or login or Hub id or 'me' for current logged in user. [optional]
                creator (str): Parameter to filter work items by there creator. Could specify few values of database id or login or Hub id or 'me' for current logged in user. [optional]
                fields (str): [optional]
                skip (int): [optional]
                top (int): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [IssueWorkItem]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.work_items_get = _Endpoint(
            settings={
                'response_type': ([IssueWorkItem],),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/workItems',
                'operation_id': 'work_items_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'query',
                    'start_date',
                    'end_date',
                    'start',
                    'end',
                    'created_start',
                    'created_end',
                    'updated_start',
                    'updated_end',
                    'author',
                    'creator',
                    'fields',
                    'skip',
                    'top',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'query':
                        (str,),
                    'start_date':
                        (date,),
                    'end_date':
                        (date,),
                    'start':
                        (int,),
                    'end':
                        (int,),
                    'created_start':
                        (int,),
                    'created_end':
                        (int,),
                    'updated_start':
                        (int,),
                    'updated_end':
                        (int,),
                    'author':
                        (str,),
                    'creator':
                        (str,),
                    'fields':
                        (str,),
                    'skip':
                        (int,),
                    'top':
                        (int,),
                },
                'attribute_map': {
                    'query': 'query',
                    'start_date': 'startDate',
                    'end_date': 'endDate',
                    'start': 'start',
                    'end': 'end',
                    'created_start': 'createdStart',
                    'created_end': 'createdEnd',
                    'updated_start': 'updatedStart',
                    'updated_end': 'updatedEnd',
                    'author': 'author',
                    'creator': 'creator',
                    'fields': 'fields',
                    'skip': '$skip',
                    'top': '$top',
                },
                'location_map': {
                    'query': 'query',
                    'start_date': 'query',
                    'end_date': 'query',
                    'start': 'query',
                    'end': 'query',
                    'created_start': 'query',
                    'created_end': 'query',
                    'updated_start': 'query',
                    'updated_end': 'query',
                    'author': 'query',
                    'creator': 'query',
                    'fields': 'query',
                    'skip': 'query',
                    'top': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__work_items_get
        )

        def __work_items_id_get(
            self,
            id,
            **kwargs
        ):
            """work_items_id_get  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.work_items_id_get(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                fields (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                IssueWorkItem
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.work_items_id_get = _Endpoint(
            settings={
                'response_type': (IssueWorkItem,),
                'auth': [
                    'permanentToken'
                ],
                'endpoint_path': '/workItems/{id}',
                'operation_id': 'work_items_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'fields',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'fields':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'fields': 'fields',
                },
                'location_map': {
                    'id': 'path',
                    'fields': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__work_items_id_get
        )
